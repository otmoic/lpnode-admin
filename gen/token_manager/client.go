// Code generated by goa v3.11.0, DO NOT EDIT.
//
// tokenManager client
//
// Command:
// $ goa gen admin-panel/design

package tokenmanager

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "tokenManager" service client.
type Client struct {
	TokenListEndpoint   goa.Endpoint
	TokenCreateEndpoint goa.Endpoint
	TokenDeleteEndpoint goa.Endpoint
}

// NewClient initializes a "tokenManager" service client given the endpoints.
func NewClient(tokenList, tokenCreate, tokenDelete goa.Endpoint) *Client {
	return &Client{
		TokenListEndpoint:   tokenList,
		TokenCreateEndpoint: tokenCreate,
		TokenDeleteEndpoint: tokenDelete,
	}
}

// TokenList calls the "tokenList" endpoint of the "tokenManager" service.
func (c *Client) TokenList(ctx context.Context) (res *TokenListResult, err error) {
	var ires interface{}
	ires, err = c.TokenListEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*TokenListResult), nil
}

// TokenCreate calls the "tokenCreate" endpoint of the "tokenManager" service.
func (c *Client) TokenCreate(ctx context.Context, p *TokenItem) (res *TokenCreateResult, err error) {
	var ires interface{}
	ires, err = c.TokenCreateEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*TokenCreateResult), nil
}

// TokenDelete calls the "tokenDelete" endpoint of the "tokenManager" service.
func (c *Client) TokenDelete(ctx context.Context, p *DeleteTokenFilter) (res *TokenDeleteResult, err error) {
	var ires interface{}
	ires, err = c.TokenDeleteEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*TokenDeleteResult), nil
}
