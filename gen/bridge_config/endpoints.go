// Code generated by goa v3.11.0, DO NOT EDIT.
//
// bridgeConfig endpoints
//
// Command:
// $ goa gen admin-panel/design

package bridgeconfig

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "bridgeConfig" service endpoints.
type Endpoints struct {
	BridgeCreate goa.Endpoint
	BridgeList   goa.Endpoint
	BridgeDelete goa.Endpoint
	BridgeTest   goa.Endpoint
}

// NewEndpoints wraps the methods of the "bridgeConfig" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		BridgeCreate: NewBridgeCreateEndpoint(s),
		BridgeList:   NewBridgeListEndpoint(s),
		BridgeDelete: NewBridgeDeleteEndpoint(s),
		BridgeTest:   NewBridgeTestEndpoint(s),
	}
}

// Use applies the given middleware to all the "bridgeConfig" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.BridgeCreate = m(e.BridgeCreate)
	e.BridgeList = m(e.BridgeList)
	e.BridgeDelete = m(e.BridgeDelete)
	e.BridgeTest = m(e.BridgeTest)
}

// NewBridgeCreateEndpoint returns an endpoint function that calls the method
// "bridgeCreate" of service "bridgeConfig".
func NewBridgeCreateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*BridgeItem)
		return s.BridgeCreate(ctx, p)
	}
}

// NewBridgeListEndpoint returns an endpoint function that calls the method
// "bridgeList" of service "bridgeConfig".
func NewBridgeListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.BridgeList(ctx)
	}
}

// NewBridgeDeleteEndpoint returns an endpoint function that calls the method
// "bridgeDelete" of service "bridgeConfig".
func NewBridgeDeleteEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeleteBridgeFilter)
		return s.BridgeDelete(ctx, p)
	}
}

// NewBridgeTestEndpoint returns an endpoint function that calls the method
// "bridgeTest" of service "bridgeConfig".
func NewBridgeTestEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*BridgeTestPayload)
		return s.BridgeTest(ctx, p)
	}
}
