// Code generated by goa v3.11.0, DO NOT EDIT.
//
// taskManager HTTP server types
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	taskmanager "admin-panel/gen/task_manager"

	goa "goa.design/goa/v3/pkg"
)

// TaskDeployRequestBody is the type of the "taskManager" service "taskDeploy"
// endpoint HTTP request body.
type TaskDeployRequestBody struct {
	ID *string `form:"_id,omitempty" json:"_id,omitempty" xml:"_id,omitempty"`
}

// UnDeployRequestBody is the type of the "taskManager" service "unDeploy"
// endpoint HTTP request body.
type UnDeployRequestBody struct {
	ID *string `form:"_id,omitempty" json:"_id,omitempty" xml:"_id,omitempty"`
}

// TaskCreateRequestBody is the type of the "taskManager" service "taskCreate"
// endpoint HTTP request body.
type TaskCreateRequestBody struct {
	ID            *string `form:"_id,omitempty" json:"_id,omitempty" xml:"_id,omitempty"`
	Schedule      *string `form:"schedule,omitempty" json:"schedule,omitempty" xml:"schedule,omitempty"`
	TaskType      *string `form:"taskType,omitempty" json:"taskType,omitempty" xml:"taskType,omitempty"`
	Deployed      *bool   `form:"deployed,omitempty" json:"deployed,omitempty" xml:"deployed,omitempty"`
	DeployMessage *string `form:"deployMessage,omitempty" json:"deployMessage,omitempty" xml:"deployMessage,omitempty"`
	ScriptPath    *string `form:"scriptPath,omitempty" json:"scriptPath,omitempty" xml:"scriptPath,omitempty"`
	ScriptBody    *string `form:"scriptBody,omitempty" json:"scriptBody,omitempty" xml:"scriptBody,omitempty"`
}

// TaskListResponseBody is the type of the "taskManager" service "taskList"
// endpoint HTTP response body.
type TaskListResponseBody struct {
	Code    *int64                  `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Result  []*TaskItemResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string                 `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// TaskDeployResponseBody is the type of the "taskManager" service "taskDeploy"
// endpoint HTTP response body.
type TaskDeployResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// rows affected on creation
	Result  *int64  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UnDeployResponseBody is the type of the "taskManager" service "unDeploy"
// endpoint HTTP response body.
type UnDeployResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// rows affected on creation
	Result  *int64  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// TaskCreateResponseBody is the type of the "taskManager" service "taskCreate"
// endpoint HTTP response body.
type TaskCreateResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// rows affected on creation
	Result  *int64  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// TaskItemResponseBody is used to define fields on response body types.
type TaskItemResponseBody struct {
	ID            *string `form:"_id,omitempty" json:"_id,omitempty" xml:"_id,omitempty"`
	Schedule      *string `form:"schedule,omitempty" json:"schedule,omitempty" xml:"schedule,omitempty"`
	TaskType      *string `form:"taskType,omitempty" json:"taskType,omitempty" xml:"taskType,omitempty"`
	Deployed      *bool   `form:"deployed,omitempty" json:"deployed,omitempty" xml:"deployed,omitempty"`
	DeployMessage *string `form:"deployMessage,omitempty" json:"deployMessage,omitempty" xml:"deployMessage,omitempty"`
	ScriptPath    *string `form:"scriptPath,omitempty" json:"scriptPath,omitempty" xml:"scriptPath,omitempty"`
	ScriptBody    *string `form:"scriptBody,omitempty" json:"scriptBody,omitempty" xml:"scriptBody,omitempty"`
}

// NewTaskListResponseBody builds the HTTP response body from the result of the
// "taskList" endpoint of the "taskManager" service.
func NewTaskListResponseBody(res *taskmanager.TaskListResult) *TaskListResponseBody {
	body := &TaskListResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Result != nil {
		body.Result = make([]*TaskItemResponseBody, len(res.Result))
		for i, val := range res.Result {
			body.Result[i] = marshalTaskmanagerTaskItemToTaskItemResponseBody(val)
		}
	}
	return body
}

// NewTaskDeployResponseBody builds the HTTP response body from the result of
// the "taskDeploy" endpoint of the "taskManager" service.
func NewTaskDeployResponseBody(res *taskmanager.TaskDeployResult) *TaskDeployResponseBody {
	body := &TaskDeployResponseBody{
		Code:    res.Code,
		Result:  res.Result,
		Message: res.Message,
	}
	return body
}

// NewUnDeployResponseBody builds the HTTP response body from the result of the
// "unDeploy" endpoint of the "taskManager" service.
func NewUnDeployResponseBody(res *taskmanager.UnDeployResult) *UnDeployResponseBody {
	body := &UnDeployResponseBody{
		Code:    res.Code,
		Result:  res.Result,
		Message: res.Message,
	}
	return body
}

// NewTaskCreateResponseBody builds the HTTP response body from the result of
// the "taskCreate" endpoint of the "taskManager" service.
func NewTaskCreateResponseBody(res *taskmanager.TaskCreateResult) *TaskCreateResponseBody {
	body := &TaskCreateResponseBody{
		Code:    res.Code,
		Result:  res.Result,
		Message: res.Message,
	}
	return body
}

// NewTaskDeploy2 builds a taskManager service taskDeploy endpoint payload.
func NewTaskDeploy2(body *TaskDeployRequestBody) *taskmanager.TaskDeploy2 {
	v := &taskmanager.TaskDeploy2{
		ID: body.ID,
	}

	return v
}

// NewUnDeployTaskDeploy2 builds a taskManager service unDeploy endpoint
// payload.
func NewUnDeployTaskDeploy2(body *UnDeployRequestBody) *taskmanager.TaskDeploy2 {
	v := &taskmanager.TaskDeploy2{
		ID: body.ID,
	}

	return v
}

// NewTaskCreateTaskItem builds a taskManager service taskCreate endpoint
// payload.
func NewTaskCreateTaskItem(body *TaskCreateRequestBody) *taskmanager.TaskItem {
	v := &taskmanager.TaskItem{
		ID:            body.ID,
		Schedule:      body.Schedule,
		TaskType:      body.TaskType,
		Deployed:      body.Deployed,
		DeployMessage: body.DeployMessage,
		ScriptPath:    body.ScriptPath,
		ScriptBody:    body.ScriptBody,
	}

	return v
}

// ValidateTaskCreateRequestBody runs the validations defined on
// TaskCreateRequestBody
func ValidateTaskCreateRequestBody(body *TaskCreateRequestBody) (err error) {
	if body.TaskType != nil {
		if !(*body.TaskType == "customize") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.taskType", *body.TaskType, []interface{}{"customize"}))
		}
	}
	return
}
