// Code generated by goa v3.11.0, DO NOT EDIT.
//
// configResource HTTP server
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	configresource "admin-panel/gen/config_resource"
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the configResource service endpoint HTTP handlers.
type Server struct {
	Mounts         []*MountPoint
	CreateResource http.Handler
	GetResource    http.Handler
	ListResource   http.Handler
	DeleteResult   http.Handler
	EditResult     http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the configResource service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *configresource.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CreateResource", "POST", "/lpnode/lpnode_admin_panel/configResource/create"},
			{"GetResource", "POST", "/lpnode/lpnode_admin_panel/configResource/get"},
			{"ListResource", "POST", "/lpnode/lpnode_admin_panel/configResource/list"},
			{"DeleteResult", "POST", "/lpnode/lpnode_admin_panel/configResource/delete"},
			{"EditResult", "POST", "/lpnode/lpnode_admin_panel/configResource/edit"},
		},
		CreateResource: NewCreateResourceHandler(e.CreateResource, mux, decoder, encoder, errhandler, formatter),
		GetResource:    NewGetResourceHandler(e.GetResource, mux, decoder, encoder, errhandler, formatter),
		ListResource:   NewListResourceHandler(e.ListResource, mux, decoder, encoder, errhandler, formatter),
		DeleteResult:   NewDeleteResultHandler(e.DeleteResult, mux, decoder, encoder, errhandler, formatter),
		EditResult:     NewEditResultHandler(e.EditResult, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "configResource" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreateResource = m(s.CreateResource)
	s.GetResource = m(s.GetResource)
	s.ListResource = m(s.ListResource)
	s.DeleteResult = m(s.DeleteResult)
	s.EditResult = m(s.EditResult)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return configresource.MethodNames[:] }

// Mount configures the mux to serve the configResource endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreateResourceHandler(mux, h.CreateResource)
	MountGetResourceHandler(mux, h.GetResource)
	MountListResourceHandler(mux, h.ListResource)
	MountDeleteResultHandler(mux, h.DeleteResult)
	MountEditResultHandler(mux, h.EditResult)
}

// Mount configures the mux to serve the configResource endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreateResourceHandler configures the mux to serve the "configResource"
// service "createResource" endpoint.
func MountCreateResourceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/configResource/create", f)
}

// NewCreateResourceHandler creates a HTTP handler which loads the HTTP request
// and calls the "configResource" service "createResource" endpoint.
func NewCreateResourceHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateResourceRequest(mux, decoder)
		encodeResponse = EncodeCreateResourceResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createResource")
		ctx = context.WithValue(ctx, goa.ServiceKey, "configResource")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetResourceHandler configures the mux to serve the "configResource"
// service "getResource" endpoint.
func MountGetResourceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/configResource/get", f)
}

// NewGetResourceHandler creates a HTTP handler which loads the HTTP request
// and calls the "configResource" service "getResource" endpoint.
func NewGetResourceHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetResourceRequest(mux, decoder)
		encodeResponse = EncodeGetResourceResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getResource")
		ctx = context.WithValue(ctx, goa.ServiceKey, "configResource")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListResourceHandler configures the mux to serve the "configResource"
// service "listResource" endpoint.
func MountListResourceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/configResource/list", f)
}

// NewListResourceHandler creates a HTTP handler which loads the HTTP request
// and calls the "configResource" service "listResource" endpoint.
func NewListResourceHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeListResourceResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listResource")
		ctx = context.WithValue(ctx, goa.ServiceKey, "configResource")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteResultHandler configures the mux to serve the "configResource"
// service "deleteResult" endpoint.
func MountDeleteResultHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/configResource/delete", f)
}

// NewDeleteResultHandler creates a HTTP handler which loads the HTTP request
// and calls the "configResource" service "deleteResult" endpoint.
func NewDeleteResultHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeDeleteResultResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteResult")
		ctx = context.WithValue(ctx, goa.ServiceKey, "configResource")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountEditResultHandler configures the mux to serve the "configResource"
// service "editResult" endpoint.
func MountEditResultHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/configResource/edit", f)
}

// NewEditResultHandler creates a HTTP handler which loads the HTTP request and
// calls the "configResource" service "editResult" endpoint.
func NewEditResultHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeEditResultRequest(mux, decoder)
		encodeResponse = EncodeEditResultResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "editResult")
		ctx = context.WithValue(ctx, goa.ServiceKey, "configResource")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
