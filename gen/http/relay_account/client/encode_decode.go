// Code generated by goa v3.11.0, DO NOT EDIT.
//
// relayAccount HTTP client encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	relayaccount "admin-panel/gen/relay_account"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildListAccountRequest instantiates a HTTP request object with method and
// path set to call the "relayAccount" service "listAccount" endpoint
func (c *Client) BuildListAccountRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListAccountRelayAccountPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("relayAccount", "listAccount", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListAccountResponse returns a decoder for responses returned by the
// relayAccount listAccount endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeListAccountResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListAccountResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("relayAccount", "listAccount", err)
			}
			err = ValidateListAccountResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("relayAccount", "listAccount", err)
			}
			res := NewListAccountResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("relayAccount", "listAccount", resp.StatusCode, string(body))
		}
	}
}

// BuildRegisterAccountRequest instantiates a HTTP request object with method
// and path set to call the "relayAccount" service "registerAccount" endpoint
func (c *Client) BuildRegisterAccountRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RegisterAccountRelayAccountPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("relayAccount", "registerAccount", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRegisterAccountRequest returns an encoder for requests sent to the
// relayAccount registerAccount server.
func EncodeRegisterAccountRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*relayaccount.RegisterAccountPayload)
		if !ok {
			return goahttp.ErrInvalidType("relayAccount", "registerAccount", "*relayaccount.RegisterAccountPayload", v)
		}
		body := NewRegisterAccountRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("relayAccount", "registerAccount", err)
		}
		return nil
	}
}

// DecodeRegisterAccountResponse returns a decoder for responses returned by
// the relayAccount registerAccount endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeRegisterAccountResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RegisterAccountResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("relayAccount", "registerAccount", err)
			}
			res := NewRegisterAccountResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("relayAccount", "registerAccount", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteAccountRequest instantiates a HTTP request object with method and
// path set to call the "relayAccount" service "deleteAccount" endpoint
func (c *Client) BuildDeleteAccountRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteAccountRelayAccountPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("relayAccount", "deleteAccount", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteAccountRequest returns an encoder for requests sent to the
// relayAccount deleteAccount server.
func EncodeDeleteAccountRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*relayaccount.DeleteAccountPayload)
		if !ok {
			return goahttp.ErrInvalidType("relayAccount", "deleteAccount", "*relayaccount.DeleteAccountPayload", v)
		}
		body := NewDeleteAccountRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("relayAccount", "deleteAccount", err)
		}
		return nil
	}
}

// DecodeDeleteAccountResponse returns a decoder for responses returned by the
// relayAccount deleteAccount endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeDeleteAccountResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteAccountResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("relayAccount", "deleteAccount", err)
			}
			res := NewDeleteAccountResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("relayAccount", "deleteAccount", resp.StatusCode, string(body))
		}
	}
}

// unmarshalRelayAccountItemResponseBodyToRelayaccountRelayAccountItem builds a
// value of type *relayaccount.RelayAccountItem from a value of type
// *RelayAccountItemResponseBody.
func unmarshalRelayAccountItemResponseBodyToRelayaccountRelayAccountItem(v *RelayAccountItemResponseBody) *relayaccount.RelayAccountItem {
	if v == nil {
		return nil
	}
	res := &relayaccount.RelayAccountItem{
		ID:           v.ID,
		Name:         v.Name,
		Profile:      v.Profile,
		LpIDFake:     v.LpIDFake,
		LpNodeAPIKey: v.LpNodeAPIKey,
		RelayAPIKey:  v.RelayAPIKey,
	}

	return res
}
