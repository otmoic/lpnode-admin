// Code generated by goa v3.11.0, DO NOT EDIT.
//
// taskManager endpoints
//
// Command:
// $ goa gen admin-panel/design

package taskmanager

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "taskManager" service endpoints.
type Endpoints struct {
	TaskList   goa.Endpoint
	TaskDeploy goa.Endpoint
	UnDeploy   goa.Endpoint
	TaskCreate goa.Endpoint
}

// NewEndpoints wraps the methods of the "taskManager" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		TaskList:   NewTaskListEndpoint(s),
		TaskDeploy: NewTaskDeployEndpoint(s),
		UnDeploy:   NewUnDeployEndpoint(s),
		TaskCreate: NewTaskCreateEndpoint(s),
	}
}

// Use applies the given middleware to all the "taskManager" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.TaskList = m(e.TaskList)
	e.TaskDeploy = m(e.TaskDeploy)
	e.UnDeploy = m(e.UnDeploy)
	e.TaskCreate = m(e.TaskCreate)
}

// NewTaskListEndpoint returns an endpoint function that calls the method
// "taskList" of service "taskManager".
func NewTaskListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.TaskList(ctx)
	}
}

// NewTaskDeployEndpoint returns an endpoint function that calls the method
// "taskDeploy" of service "taskManager".
func NewTaskDeployEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*TaskDeploy2)
		return s.TaskDeploy(ctx, p)
	}
}

// NewUnDeployEndpoint returns an endpoint function that calls the method
// "unDeploy" of service "taskManager".
func NewUnDeployEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*TaskDeploy2)
		return s.UnDeploy(ctx, p)
	}
}

// NewTaskCreateEndpoint returns an endpoint function that calls the method
// "taskCreate" of service "taskManager".
func NewTaskCreateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*TaskItem)
		return s.TaskCreate(ctx, p)
	}
}
