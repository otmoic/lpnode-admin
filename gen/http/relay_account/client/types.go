// Code generated by goa v3.11.0, DO NOT EDIT.
//
// relayAccount HTTP client types
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	relayaccount "admin-panel/gen/relay_account"

	goa "goa.design/goa/v3/pkg"
)

// RegisterAccountRequestBody is the type of the "relayAccount" service
// "registerAccount" endpoint HTTP request body.
type RegisterAccountRequestBody struct {
	Name    string  `form:"name" json:"name" xml:"name"`
	Profile *string `form:"profile,omitempty" json:"profile,omitempty" xml:"profile,omitempty"`
}

// ListAccountResponseBody is the type of the "relayAccount" service
// "listAccount" endpoint HTTP response body.
type ListAccountResponseBody struct {
	Code    *int64                          `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Result  []*RelayAccountItemResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string                         `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RegisterAccountResponseBody is the type of the "relayAccount" service
// "registerAccount" endpoint HTTP response body.
type RegisterAccountResponseBody struct {
	Code    *int64                        `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Result  *RelayAccountItemResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string                       `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RelayAccountItemResponseBody is used to define fields on response body types.
type RelayAccountItemResponseBody struct {
	ID           *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Name         *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Profile      *string `form:"profile,omitempty" json:"profile,omitempty" xml:"profile,omitempty"`
	LpIDFake     *string `form:"lpIdFake,omitempty" json:"lpIdFake,omitempty" xml:"lpIdFake,omitempty"`
	LpNodeAPIKey *string `form:"lpNodeApiKey,omitempty" json:"lpNodeApiKey,omitempty" xml:"lpNodeApiKey,omitempty"`
	RelayAPIKey  *string `form:"relayApiKey,omitempty" json:"relayApiKey,omitempty" xml:"relayApiKey,omitempty"`
}

// NewRegisterAccountRequestBody builds the HTTP request body from the payload
// of the "registerAccount" endpoint of the "relayAccount" service.
func NewRegisterAccountRequestBody(p *relayaccount.RegisterAccountPayload) *RegisterAccountRequestBody {
	body := &RegisterAccountRequestBody{
		Name:    p.Name,
		Profile: p.Profile,
	}
	return body
}

// NewListAccountResultOK builds a "relayAccount" service "listAccount"
// endpoint result from a HTTP "OK" response.
func NewListAccountResultOK(body *ListAccountResponseBody) *relayaccount.ListAccountResult {
	v := &relayaccount.ListAccountResult{
		Code:    *body.Code,
		Message: body.Message,
	}
	if body.Result != nil {
		v.Result = make([]*relayaccount.RelayAccountItem, len(body.Result))
		for i, val := range body.Result {
			v.Result[i] = unmarshalRelayAccountItemResponseBodyToRelayaccountRelayAccountItem(val)
		}
	}

	return v
}

// NewRegisterAccountResultOK builds a "relayAccount" service "registerAccount"
// endpoint result from a HTTP "OK" response.
func NewRegisterAccountResultOK(body *RegisterAccountResponseBody) *relayaccount.RegisterAccountResult {
	v := &relayaccount.RegisterAccountResult{
		Code:    body.Code,
		Message: body.Message,
	}
	if body.Result != nil {
		v.Result = unmarshalRelayAccountItemResponseBodyToRelayaccountRelayAccountItem(body.Result)
	}

	return v
}

// ValidateListAccountResponseBody runs the validations defined on
// ListAccountResponseBody
func ValidateListAccountResponseBody(body *ListAccountResponseBody) (err error) {
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	return
}
