// Code generated by goa v3.11.0, DO NOT EDIT.
//
// configResource HTTP server encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	configresource "admin-panel/gen/config_resource"
	"context"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeCreateResourceResponse returns an encoder for responses returned by
// the configResource createResource endpoint.
func EncodeCreateResourceResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*configresource.CreateResourceResult)
		enc := encoder(ctx, w)
		body := NewCreateResourceResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateResourceRequest returns a decoder for requests sent to the
// configResource createResource endpoint.
func DecodeCreateResourceRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateResourceRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateResourceRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateResourcePayload(&body)

		return payload, nil
	}
}

// EncodeGetResourceResponse returns an encoder for responses returned by the
// configResource getResource endpoint.
func EncodeGetResourceResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*configresource.GetResourceResult)
		enc := encoder(ctx, w)
		body := NewGetResourceResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetResourceRequest returns a decoder for requests sent to the
// configResource getResource endpoint.
func DecodeGetResourceRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body GetResourceRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateGetResourceRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewGetResourcePayload(&body)

		return payload, nil
	}
}

// EncodeListResourceResponse returns an encoder for responses returned by the
// configResource listResource endpoint.
func EncodeListResourceResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*configresource.ListResourceResult)
		enc := encoder(ctx, w)
		body := NewListResourceResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeDeleteResultResponse returns an encoder for responses returned by the
// configResource deleteResult endpoint.
func EncodeDeleteResultResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*configresource.DeleteResultResult)
		enc := encoder(ctx, w)
		body := NewDeleteResultResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeEditResultResponse returns an encoder for responses returned by the
// configResource editResult endpoint.
func EncodeEditResultResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*configresource.EditResultResult)
		enc := encoder(ctx, w)
		body := NewEditResultResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeEditResultRequest returns a decoder for requests sent to the
// configResource editResult endpoint.
func DecodeEditResultRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body EditResultRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateEditResultRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewEditResultPayload(&body)

		return payload, nil
	}
}

// marshalConfigresourceConfigResultIDItemToConfigResultIDItemResponseBody
// builds a value of type *ConfigResultIDItemResponseBody from a value of type
// *configresource.ConfigResultIDItem.
func marshalConfigresourceConfigResultIDItemToConfigResultIDItemResponseBody(v *configresource.ConfigResultIDItem) *ConfigResultIDItemResponseBody {
	if v == nil {
		return nil
	}
	res := &ConfigResultIDItemResponseBody{
		ID:       v.ID,
		ClientID: v.ClientID,
	}

	return res
}

// marshalConfigresourceResourceConfigResultToResourceConfigResultResponseBody
// builds a value of type *ResourceConfigResultResponseBody from a value of
// type *configresource.ResourceConfigResult.
func marshalConfigresourceResourceConfigResultToResourceConfigResultResponseBody(v *configresource.ResourceConfigResult) *ResourceConfigResultResponseBody {
	if v == nil {
		return nil
	}
	res := &ResourceConfigResultResponseBody{
		ID:             v.ID,
		TemplateResult: v.TemplateResult,
		Template:       v.Template,
		ClientID:       v.ClientID,
		AppName:        v.AppName,
		Version:        v.Version,
		VersionHash:    v.VersionHash,
	}

	return res
}
