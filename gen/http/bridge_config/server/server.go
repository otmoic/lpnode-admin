// Code generated by goa v3.11.0, DO NOT EDIT.
//
// bridgeConfig HTTP server
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	bridgeconfig "admin-panel/gen/bridge_config"
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the bridgeConfig service endpoint HTTP handlers.
type Server struct {
	Mounts       []*MountPoint
	BridgeCreate http.Handler
	BridgeList   http.Handler
	BridgeDelete http.Handler
	BridgeTest   http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the bridgeConfig service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *bridgeconfig.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"BridgeCreate", "POST", "/lpnode/lpnode_admin_panel/bridge/create"},
			{"BridgeList", "GET", "/lpnode/lpnode_admin_panel/bridge/list"},
			{"BridgeDelete", "POST", "/lpnode/lpnode_admin_panel/bridge/delete"},
			{"BridgeTest", "POST", "/lpnode/lpnode_admin_panel/bridge/test"},
		},
		BridgeCreate: NewBridgeCreateHandler(e.BridgeCreate, mux, decoder, encoder, errhandler, formatter),
		BridgeList:   NewBridgeListHandler(e.BridgeList, mux, decoder, encoder, errhandler, formatter),
		BridgeDelete: NewBridgeDeleteHandler(e.BridgeDelete, mux, decoder, encoder, errhandler, formatter),
		BridgeTest:   NewBridgeTestHandler(e.BridgeTest, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "bridgeConfig" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.BridgeCreate = m(s.BridgeCreate)
	s.BridgeList = m(s.BridgeList)
	s.BridgeDelete = m(s.BridgeDelete)
	s.BridgeTest = m(s.BridgeTest)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return bridgeconfig.MethodNames[:] }

// Mount configures the mux to serve the bridgeConfig endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountBridgeCreateHandler(mux, h.BridgeCreate)
	MountBridgeListHandler(mux, h.BridgeList)
	MountBridgeDeleteHandler(mux, h.BridgeDelete)
	MountBridgeTestHandler(mux, h.BridgeTest)
}

// Mount configures the mux to serve the bridgeConfig endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountBridgeCreateHandler configures the mux to serve the "bridgeConfig"
// service "bridgeCreate" endpoint.
func MountBridgeCreateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/bridge/create", f)
}

// NewBridgeCreateHandler creates a HTTP handler which loads the HTTP request
// and calls the "bridgeConfig" service "bridgeCreate" endpoint.
func NewBridgeCreateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeBridgeCreateRequest(mux, decoder)
		encodeResponse = EncodeBridgeCreateResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "bridgeCreate")
		ctx = context.WithValue(ctx, goa.ServiceKey, "bridgeConfig")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountBridgeListHandler configures the mux to serve the "bridgeConfig"
// service "bridgeList" endpoint.
func MountBridgeListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/lpnode/lpnode_admin_panel/bridge/list", f)
}

// NewBridgeListHandler creates a HTTP handler which loads the HTTP request and
// calls the "bridgeConfig" service "bridgeList" endpoint.
func NewBridgeListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeBridgeListResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "bridgeList")
		ctx = context.WithValue(ctx, goa.ServiceKey, "bridgeConfig")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountBridgeDeleteHandler configures the mux to serve the "bridgeConfig"
// service "bridgeDelete" endpoint.
func MountBridgeDeleteHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/bridge/delete", f)
}

// NewBridgeDeleteHandler creates a HTTP handler which loads the HTTP request
// and calls the "bridgeConfig" service "bridgeDelete" endpoint.
func NewBridgeDeleteHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeBridgeDeleteRequest(mux, decoder)
		encodeResponse = EncodeBridgeDeleteResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "bridgeDelete")
		ctx = context.WithValue(ctx, goa.ServiceKey, "bridgeConfig")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountBridgeTestHandler configures the mux to serve the "bridgeConfig"
// service "bridgeTest" endpoint.
func MountBridgeTestHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/bridge/test", f)
}

// NewBridgeTestHandler creates a HTTP handler which loads the HTTP request and
// calls the "bridgeConfig" service "bridgeTest" endpoint.
func NewBridgeTestHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeBridgeTestRequest(mux, decoder)
		encodeResponse = EncodeBridgeTestResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "bridgeTest")
		ctx = context.WithValue(ctx, goa.ServiceKey, "bridgeConfig")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
