// Code generated by goa v3.11.0, DO NOT EDIT.
//
// lpmonit HTTP server
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	lpmonit "admin-panel/gen/lpmonit"
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the lpmonit service endpoint HTTP handlers.
type Server struct {
	Mounts       []*MountPoint
	AddScript    http.Handler
	ListScript   http.Handler
	DeleteScript http.Handler
	RunScript    http.Handler
	RunResult    http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the lpmonit service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *lpmonit.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"AddScript", "POST", "/lpnode/lpnode_admin_panel/monit/script_add"},
			{"ListScript", "GET", "/lpnode/lpnode_admin_panel/monit/task_list"},
			{"DeleteScript", "POST", "/lpnode/lpnode_admin_panel/monit/task_del"},
			{"RunScript", "POST", "/lpnode/lpnode_admin_panel/monit/script_run"},
			{"RunResult", "POST", "/lpnode/lpnode_admin_panel/monit/run_result"},
		},
		AddScript:    NewAddScriptHandler(e.AddScript, mux, decoder, encoder, errhandler, formatter),
		ListScript:   NewListScriptHandler(e.ListScript, mux, decoder, encoder, errhandler, formatter),
		DeleteScript: NewDeleteScriptHandler(e.DeleteScript, mux, decoder, encoder, errhandler, formatter),
		RunScript:    NewRunScriptHandler(e.RunScript, mux, decoder, encoder, errhandler, formatter),
		RunResult:    NewRunResultHandler(e.RunResult, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "lpmonit" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.AddScript = m(s.AddScript)
	s.ListScript = m(s.ListScript)
	s.DeleteScript = m(s.DeleteScript)
	s.RunScript = m(s.RunScript)
	s.RunResult = m(s.RunResult)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return lpmonit.MethodNames[:] }

// Mount configures the mux to serve the lpmonit endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountAddScriptHandler(mux, h.AddScript)
	MountListScriptHandler(mux, h.ListScript)
	MountDeleteScriptHandler(mux, h.DeleteScript)
	MountRunScriptHandler(mux, h.RunScript)
	MountRunResultHandler(mux, h.RunResult)
}

// Mount configures the mux to serve the lpmonit endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountAddScriptHandler configures the mux to serve the "lpmonit" service
// "add_script" endpoint.
func MountAddScriptHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/monit/script_add", f)
}

// NewAddScriptHandler creates a HTTP handler which loads the HTTP request and
// calls the "lpmonit" service "add_script" endpoint.
func NewAddScriptHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeAddScriptRequest(mux, decoder)
		encodeResponse = EncodeAddScriptResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "add_script")
		ctx = context.WithValue(ctx, goa.ServiceKey, "lpmonit")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListScriptHandler configures the mux to serve the "lpmonit" service
// "list_script" endpoint.
func MountListScriptHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/lpnode/lpnode_admin_panel/monit/task_list", f)
}

// NewListScriptHandler creates a HTTP handler which loads the HTTP request and
// calls the "lpmonit" service "list_script" endpoint.
func NewListScriptHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeListScriptResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "list_script")
		ctx = context.WithValue(ctx, goa.ServiceKey, "lpmonit")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteScriptHandler configures the mux to serve the "lpmonit" service
// "delete_script" endpoint.
func MountDeleteScriptHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/monit/task_del", f)
}

// NewDeleteScriptHandler creates a HTTP handler which loads the HTTP request
// and calls the "lpmonit" service "delete_script" endpoint.
func NewDeleteScriptHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteScriptRequest(mux, decoder)
		encodeResponse = EncodeDeleteScriptResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delete_script")
		ctx = context.WithValue(ctx, goa.ServiceKey, "lpmonit")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRunScriptHandler configures the mux to serve the "lpmonit" service
// "run_script" endpoint.
func MountRunScriptHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/monit/script_run", f)
}

// NewRunScriptHandler creates a HTTP handler which loads the HTTP request and
// calls the "lpmonit" service "run_script" endpoint.
func NewRunScriptHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRunScriptRequest(mux, decoder)
		encodeResponse = EncodeRunScriptResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "run_script")
		ctx = context.WithValue(ctx, goa.ServiceKey, "lpmonit")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountRunResultHandler configures the mux to serve the "lpmonit" service
// "run_result" endpoint.
func MountRunResultHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/monit/run_result", f)
}

// NewRunResultHandler creates a HTTP handler which loads the HTTP request and
// calls the "lpmonit" service "run_result" endpoint.
func NewRunResultHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeRunResultRequest(mux, decoder)
		encodeResponse = EncodeRunResultResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "run_result")
		ctx = context.WithValue(ctx, goa.ServiceKey, "lpmonit")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
