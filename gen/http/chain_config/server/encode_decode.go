// Code generated by goa v3.11.0, DO NOT EDIT.
//
// chainConfig HTTP server encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	chainconfig "admin-panel/gen/chain_config"
	"context"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeSetChainListResponse returns an encoder for responses returned by the
// chainConfig setChainList endpoint.
func EncodeSetChainListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*chainconfig.SetChainListResult)
		enc := encoder(ctx, w)
		body := NewSetChainListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSetChainListRequest returns a decoder for requests sent to the
// chainConfig setChainList endpoint.
func DecodeSetChainListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body SetChainListRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewSetChainListPayload(&body)

		return payload, nil
	}
}

// EncodeDelChainListResponse returns an encoder for responses returned by the
// chainConfig delChainList endpoint.
func EncodeDelChainListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*chainconfig.DelChainListResult)
		enc := encoder(ctx, w)
		body := NewDelChainListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDelChainListRequest returns a decoder for requests sent to the
// chainConfig delChainList endpoint.
func DecodeDelChainListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body DelChainListRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateDelChainListRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewDelChainListPayload(&body)

		return payload, nil
	}
}

// EncodeChainListResponse returns an encoder for responses returned by the
// chainConfig chainList endpoint.
func EncodeChainListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*chainconfig.ChainListResult)
		enc := encoder(ctx, w)
		body := NewChainListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeSetChainGasUsdResponse returns an encoder for responses returned by
// the chainConfig setChainGasUsd endpoint.
func EncodeSetChainGasUsdResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*chainconfig.SetChainGasUsdResult)
		enc := encoder(ctx, w)
		body := NewSetChainGasUsdResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSetChainGasUsdRequest returns a decoder for requests sent to the
// chainConfig setChainGasUsd endpoint.
func DecodeSetChainGasUsdRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body SetChainGasUsdRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSetChainGasUsdRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewSetChainGasUsdPayload(&body)

		return payload, nil
	}
}

// EncodeSetChainClientConfigResponse returns an encoder for responses returned
// by the chainConfig setChainClientConfig endpoint.
func EncodeSetChainClientConfigResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*chainconfig.SetChainClientConfigResult)
		enc := encoder(ctx, w)
		body := NewSetChainClientConfigResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeSetChainClientConfigRequest returns a decoder for requests sent to the
// chainConfig setChainClientConfig endpoint.
func DecodeSetChainClientConfigRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body SetChainClientConfigRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateSetChainClientConfigRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewSetChainClientConfigPayload(&body)

		return payload, nil
	}
}

// unmarshalChainDataItemRequestBodyToChainconfigChainDataItem builds a value
// of type *chainconfig.ChainDataItem from a value of type
// *ChainDataItemRequestBody.
func unmarshalChainDataItemRequestBodyToChainconfigChainDataItem(v *ChainDataItemRequestBody) *chainconfig.ChainDataItem {
	if v == nil {
		return nil
	}
	res := &chainconfig.ChainDataItem{
		ChainID:   v.ChainID,
		ChainName: v.ChainName,
		Name:      v.Name,
		TokenName: v.TokenName,
	}

	return res
}

// marshalChainconfigChainDataItemToChainDataItemResponseBody builds a value of
// type *ChainDataItemResponseBody from a value of type
// *chainconfig.ChainDataItem.
func marshalChainconfigChainDataItemToChainDataItemResponseBody(v *chainconfig.ChainDataItem) *ChainDataItemResponseBody {
	if v == nil {
		return nil
	}
	res := &ChainDataItemResponseBody{
		ChainID:   v.ChainID,
		ChainName: v.ChainName,
		Name:      v.Name,
		TokenName: v.TokenName,
	}

	return res
}
