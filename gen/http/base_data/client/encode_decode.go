// Code generated by goa v3.11.0, DO NOT EDIT.
//
// baseData HTTP client encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	basedata "admin-panel/gen/base_data"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildChainDataListRequest instantiates a HTTP request object with method and
// path set to call the "baseData" service "chainDataList" endpoint
func (c *Client) BuildChainDataListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ChainDataListBaseDataPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("baseData", "chainDataList", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeChainDataListResponse returns a decoder for responses returned by the
// baseData chainDataList endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeChainDataListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ChainDataListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("baseData", "chainDataList", err)
			}
			res := NewChainDataListResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("baseData", "chainDataList", resp.StatusCode, string(body))
		}
	}
}

// BuildRunTimeEnvRequest instantiates a HTTP request object with method and
// path set to call the "baseData" service "runTimeEnv" endpoint
func (c *Client) BuildRunTimeEnvRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RunTimeEnvBaseDataPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("baseData", "runTimeEnv", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRunTimeEnvResponse returns a decoder for responses returned by the
// baseData runTimeEnv endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeRunTimeEnvResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RunTimeEnvResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("baseData", "runTimeEnv", err)
			}
			res := NewRunTimeEnvResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("baseData", "runTimeEnv", resp.StatusCode, string(body))
		}
	}
}

// unmarshalChainDataItemResponseBodyToBasedataChainDataItem builds a value of
// type *basedata.ChainDataItem from a value of type *ChainDataItemResponseBody.
func unmarshalChainDataItemResponseBodyToBasedataChainDataItem(v *ChainDataItemResponseBody) *basedata.ChainDataItem {
	if v == nil {
		return nil
	}
	res := &basedata.ChainDataItem{
		ID:        v.ID,
		ChainID:   v.ChainID,
		Name:      v.Name,
		ChainName: v.ChainName,
		TokenName: v.TokenName,
	}

	return res
}
