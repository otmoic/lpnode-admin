// Code generated by goa v3.11.0, DO NOT EDIT.
//
// ammOrderCenter HTTP client encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	ammordercenter "admin-panel/gen/amm_order_center"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "ammOrderCenter" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListAmmOrderCenterPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("ammOrderCenter", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the ammOrderCenter
// list server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*ammordercenter.ListPayload)
		if !ok {
			return goahttp.ErrInvalidType("ammOrderCenter", "list", "*ammordercenter.ListPayload", v)
		}
		body := NewListRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("ammOrderCenter", "list", err)
		}
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the
// ammOrderCenter list endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("ammOrderCenter", "list", err)
			}
			res := NewListResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("ammOrderCenter", "list", resp.StatusCode, string(body))
		}
	}
}

// unmarshalAmmOrderCenterRetResultResponseBodyToAmmordercenterAmmOrderCenterRetResult
// builds a value of type *ammordercenter.AmmOrderCenterRetResult from a value
// of type *AmmOrderCenterRetResultResponseBody.
func unmarshalAmmOrderCenterRetResultResponseBodyToAmmordercenterAmmOrderCenterRetResult(v *AmmOrderCenterRetResultResponseBody) *ammordercenter.AmmOrderCenterRetResult {
	if v == nil {
		return nil
	}
	res := &ammordercenter.AmmOrderCenterRetResult{
		PageCount: v.PageCount,
	}
	if v.List != nil {
		res.List = make([]ammordercenter.OrderCenterAmmOrderItem, len(v.List))
		for i, val := range v.List {
			res.List[i] = ammordercenter.OrderCenterAmmOrderItem(val)
		}
	}

	return res
}
