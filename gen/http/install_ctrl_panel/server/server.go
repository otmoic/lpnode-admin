// Code generated by goa v3.11.0, DO NOT EDIT.
//
// installCtrlPanel HTTP server
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	installctrlpanel "admin-panel/gen/install_ctrl_panel"
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the installCtrlPanel service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	ListInstall         http.Handler
	InstallLpClient     http.Handler
	UninstallLpClient   http.Handler
	InstallDeployment   http.Handler
	UninstallDeployment http.Handler
	UpdateDeployment    http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the installCtrlPanel service
// endpoints using the provided encoder and decoder. The handlers are mounted
// on the given mux using the HTTP verb and path defined in the design.
// errhandler is called whenever a response fails to be encoded. formatter is
// used to format errors returned by the service methods prior to encoding.
// Both errhandler and formatter are optional and can be nil.
func New(
	e *installctrlpanel.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ListInstall", "POST", "/lpnode/lpnode_admin_panel/ctrl/listInstall"},
			{"InstallLpClient", "POST", "/lpnode/lpnode_admin_panel/ctrl/installLpClient"},
			{"UninstallLpClient", "POST", "/lpnode/lpnode_admin_panel/ctrl/uninstallLpClient"},
			{"InstallDeployment", "POST", "/lpnode/lpnode_admin_panel/ctrl/installDeployment"},
			{"UninstallDeployment", "POST", "/lpnode/lpnode_admin_panel/ctrl/uninstallDeployment"},
			{"UpdateDeployment", "POST", "/lpnode/lpnode_admin_panel/ctrl/updateDeployment"},
		},
		ListInstall:         NewListInstallHandler(e.ListInstall, mux, decoder, encoder, errhandler, formatter),
		InstallLpClient:     NewInstallLpClientHandler(e.InstallLpClient, mux, decoder, encoder, errhandler, formatter),
		UninstallLpClient:   NewUninstallLpClientHandler(e.UninstallLpClient, mux, decoder, encoder, errhandler, formatter),
		InstallDeployment:   NewInstallDeploymentHandler(e.InstallDeployment, mux, decoder, encoder, errhandler, formatter),
		UninstallDeployment: NewUninstallDeploymentHandler(e.UninstallDeployment, mux, decoder, encoder, errhandler, formatter),
		UpdateDeployment:    NewUpdateDeploymentHandler(e.UpdateDeployment, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "installCtrlPanel" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ListInstall = m(s.ListInstall)
	s.InstallLpClient = m(s.InstallLpClient)
	s.UninstallLpClient = m(s.UninstallLpClient)
	s.InstallDeployment = m(s.InstallDeployment)
	s.UninstallDeployment = m(s.UninstallDeployment)
	s.UpdateDeployment = m(s.UpdateDeployment)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return installctrlpanel.MethodNames[:] }

// Mount configures the mux to serve the installCtrlPanel endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountListInstallHandler(mux, h.ListInstall)
	MountInstallLpClientHandler(mux, h.InstallLpClient)
	MountUninstallLpClientHandler(mux, h.UninstallLpClient)
	MountInstallDeploymentHandler(mux, h.InstallDeployment)
	MountUninstallDeploymentHandler(mux, h.UninstallDeployment)
	MountUpdateDeploymentHandler(mux, h.UpdateDeployment)
}

// Mount configures the mux to serve the installCtrlPanel endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountListInstallHandler configures the mux to serve the "installCtrlPanel"
// service "listInstall" endpoint.
func MountListInstallHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/ctrl/listInstall", f)
}

// NewListInstallHandler creates a HTTP handler which loads the HTTP request
// and calls the "installCtrlPanel" service "listInstall" endpoint.
func NewListInstallHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListInstallRequest(mux, decoder)
		encodeResponse = EncodeListInstallResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listInstall")
		ctx = context.WithValue(ctx, goa.ServiceKey, "installCtrlPanel")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountInstallLpClientHandler configures the mux to serve the
// "installCtrlPanel" service "installLpClient" endpoint.
func MountInstallLpClientHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/ctrl/installLpClient", f)
}

// NewInstallLpClientHandler creates a HTTP handler which loads the HTTP
// request and calls the "installCtrlPanel" service "installLpClient" endpoint.
func NewInstallLpClientHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeInstallLpClientRequest(mux, decoder)
		encodeResponse = EncodeInstallLpClientResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "installLpClient")
		ctx = context.WithValue(ctx, goa.ServiceKey, "installCtrlPanel")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUninstallLpClientHandler configures the mux to serve the
// "installCtrlPanel" service "uninstallLpClient" endpoint.
func MountUninstallLpClientHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/ctrl/uninstallLpClient", f)
}

// NewUninstallLpClientHandler creates a HTTP handler which loads the HTTP
// request and calls the "installCtrlPanel" service "uninstallLpClient"
// endpoint.
func NewUninstallLpClientHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUninstallLpClientRequest(mux, decoder)
		encodeResponse = EncodeUninstallLpClientResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "uninstallLpClient")
		ctx = context.WithValue(ctx, goa.ServiceKey, "installCtrlPanel")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountInstallDeploymentHandler configures the mux to serve the
// "installCtrlPanel" service "installDeployment" endpoint.
func MountInstallDeploymentHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/ctrl/installDeployment", f)
}

// NewInstallDeploymentHandler creates a HTTP handler which loads the HTTP
// request and calls the "installCtrlPanel" service "installDeployment"
// endpoint.
func NewInstallDeploymentHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeInstallDeploymentRequest(mux, decoder)
		encodeResponse = EncodeInstallDeploymentResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "installDeployment")
		ctx = context.WithValue(ctx, goa.ServiceKey, "installCtrlPanel")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUninstallDeploymentHandler configures the mux to serve the
// "installCtrlPanel" service "uninstallDeployment" endpoint.
func MountUninstallDeploymentHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/ctrl/uninstallDeployment", f)
}

// NewUninstallDeploymentHandler creates a HTTP handler which loads the HTTP
// request and calls the "installCtrlPanel" service "uninstallDeployment"
// endpoint.
func NewUninstallDeploymentHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUninstallDeploymentRequest(mux, decoder)
		encodeResponse = EncodeUninstallDeploymentResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "uninstallDeployment")
		ctx = context.WithValue(ctx, goa.ServiceKey, "installCtrlPanel")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateDeploymentHandler configures the mux to serve the
// "installCtrlPanel" service "updateDeployment" endpoint.
func MountUpdateDeploymentHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/ctrl/updateDeployment", f)
}

// NewUpdateDeploymentHandler creates a HTTP handler which loads the HTTP
// request and calls the "installCtrlPanel" service "updateDeployment" endpoint.
func NewUpdateDeploymentHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateDeploymentRequest(mux, decoder)
		encodeResponse = EncodeUpdateDeploymentResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateDeployment")
		ctx = context.WithValue(ctx, goa.ServiceKey, "installCtrlPanel")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
