// Code generated by goa v3.11.0, DO NOT EDIT.
//
// accountDex HTTP client encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	accountdex "admin-panel/gen/account_dex"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildWalletInfoRequest instantiates a HTTP request object with method and
// path set to call the "accountDex" service "walletInfo" endpoint
func (c *Client) BuildWalletInfoRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: WalletInfoAccountDexPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("accountDex", "walletInfo", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeWalletInfoRequest returns an encoder for requests sent to the
// accountDex walletInfo server.
func EncodeWalletInfoRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*accountdex.WalletInfoPayload)
		if !ok {
			return goahttp.ErrInvalidType("accountDex", "walletInfo", "*accountdex.WalletInfoPayload", v)
		}
		body := NewWalletInfoRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("accountDex", "walletInfo", err)
		}
		return nil
	}
}

// DecodeWalletInfoResponse returns a decoder for responses returned by the
// accountDex walletInfo endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeWalletInfoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body WalletInfoResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("accountDex", "walletInfo", err)
			}
			res := NewWalletInfoResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("accountDex", "walletInfo", resp.StatusCode, string(body))
		}
	}
}

// unmarshalDexAccountBalanceResponseBodyToAccountdexDexAccountBalance builds a
// value of type *accountdex.DexAccountBalance from a value of type
// *DexAccountBalanceResponseBody.
func unmarshalDexAccountBalanceResponseBodyToAccountdexDexAccountBalance(v *DexAccountBalanceResponseBody) *accountdex.DexAccountBalance {
	if v == nil {
		return nil
	}
	res := &accountdex.DexAccountBalance{
		Token:     v.Token,
		TokenName: v.TokenName,
		Amount:    v.Amount,
		Free:      v.Free,
		Locked:    v.Locked,
		Price:     v.Price,
	}

	return res
}
