// Code generated by goa v3.11.0, DO NOT EDIT.
//
// taskManager HTTP server encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	taskmanager "admin-panel/gen/task_manager"
	"context"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeTaskListResponse returns an encoder for responses returned by the
// taskManager taskList endpoint.
func EncodeTaskListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*taskmanager.TaskListResult)
		enc := encoder(ctx, w)
		body := NewTaskListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeTaskDeployResponse returns an encoder for responses returned by the
// taskManager taskDeploy endpoint.
func EncodeTaskDeployResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*taskmanager.TaskDeployResult)
		enc := encoder(ctx, w)
		body := NewTaskDeployResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeTaskDeployRequest returns a decoder for requests sent to the
// taskManager taskDeploy endpoint.
func DecodeTaskDeployRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body TaskDeployRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewTaskDeploy2(&body)

		return payload, nil
	}
}

// EncodeUnDeployResponse returns an encoder for responses returned by the
// taskManager unDeploy endpoint.
func EncodeUnDeployResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*taskmanager.UnDeployResult)
		enc := encoder(ctx, w)
		body := NewUnDeployResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUnDeployRequest returns a decoder for requests sent to the taskManager
// unDeploy endpoint.
func DecodeUnDeployRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UnDeployRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewUnDeployTaskDeploy2(&body)

		return payload, nil
	}
}

// EncodeTaskCreateResponse returns an encoder for responses returned by the
// taskManager taskCreate endpoint.
func EncodeTaskCreateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*taskmanager.TaskCreateResult)
		enc := encoder(ctx, w)
		body := NewTaskCreateResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeTaskCreateRequest returns a decoder for requests sent to the
// taskManager taskCreate endpoint.
func DecodeTaskCreateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body TaskCreateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateTaskCreateRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewTaskCreateTaskItem(&body)

		return payload, nil
	}
}

// marshalTaskmanagerTaskItemToTaskItemResponseBody builds a value of type
// *TaskItemResponseBody from a value of type *taskmanager.TaskItem.
func marshalTaskmanagerTaskItemToTaskItemResponseBody(v *taskmanager.TaskItem) *TaskItemResponseBody {
	if v == nil {
		return nil
	}
	res := &TaskItemResponseBody{
		ID:            v.ID,
		Schedule:      v.Schedule,
		TaskType:      v.TaskType,
		Deployed:      v.Deployed,
		DeployMessage: v.DeployMessage,
		ScriptPath:    v.ScriptPath,
		ScriptBody:    v.ScriptBody,
	}

	return res
}
