// Code generated by goa v3.11.0, DO NOT EDIT.
//
// installCtrlPanel HTTP client encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	installctrlpanel "admin-panel/gen/install_ctrl_panel"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildListInstallRequest instantiates a HTTP request object with method and
// path set to call the "installCtrlPanel" service "listInstall" endpoint
func (c *Client) BuildListInstallRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListInstallInstallCtrlPanelPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("installCtrlPanel", "listInstall", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListInstallRequest returns an encoder for requests sent to the
// installCtrlPanel listInstall server.
func EncodeListInstallRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*installctrlpanel.ListInstallPayload)
		if !ok {
			return goahttp.ErrInvalidType("installCtrlPanel", "listInstall", "*installctrlpanel.ListInstallPayload", v)
		}
		body := NewListInstallRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("installCtrlPanel", "listInstall", err)
		}
		return nil
	}
}

// DecodeListInstallResponse returns a decoder for responses returned by the
// installCtrlPanel listInstall endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeListInstallResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListInstallResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("installCtrlPanel", "listInstall", err)
			}
			res := NewListInstallResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("installCtrlPanel", "listInstall", resp.StatusCode, string(body))
		}
	}
}

// BuildInstallLpClientRequest instantiates a HTTP request object with method
// and path set to call the "installCtrlPanel" service "installLpClient"
// endpoint
func (c *Client) BuildInstallLpClientRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: InstallLpClientInstallCtrlPanelPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("installCtrlPanel", "installLpClient", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeInstallLpClientRequest returns an encoder for requests sent to the
// installCtrlPanel installLpClient server.
func EncodeInstallLpClientRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*installctrlpanel.InstallLpClientPayload)
		if !ok {
			return goahttp.ErrInvalidType("installCtrlPanel", "installLpClient", "*installctrlpanel.InstallLpClientPayload", v)
		}
		body := NewInstallLpClientRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("installCtrlPanel", "installLpClient", err)
		}
		return nil
	}
}

// DecodeInstallLpClientResponse returns a decoder for responses returned by
// the installCtrlPanel installLpClient endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeInstallLpClientResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body InstallLpClientResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("installCtrlPanel", "installLpClient", err)
			}
			res := NewInstallLpClientResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("installCtrlPanel", "installLpClient", resp.StatusCode, string(body))
		}
	}
}

// BuildUninstallLpClientRequest instantiates a HTTP request object with method
// and path set to call the "installCtrlPanel" service "uninstallLpClient"
// endpoint
func (c *Client) BuildUninstallLpClientRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UninstallLpClientInstallCtrlPanelPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("installCtrlPanel", "uninstallLpClient", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUninstallLpClientRequest returns an encoder for requests sent to the
// installCtrlPanel uninstallLpClient server.
func EncodeUninstallLpClientRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*installctrlpanel.UninstallLpClientPayload)
		if !ok {
			return goahttp.ErrInvalidType("installCtrlPanel", "uninstallLpClient", "*installctrlpanel.UninstallLpClientPayload", v)
		}
		body := NewUninstallLpClientRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("installCtrlPanel", "uninstallLpClient", err)
		}
		return nil
	}
}

// DecodeUninstallLpClientResponse returns a decoder for responses returned by
// the installCtrlPanel uninstallLpClient endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeUninstallLpClientResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UninstallLpClientResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("installCtrlPanel", "uninstallLpClient", err)
			}
			res := NewUninstallLpClientResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("installCtrlPanel", "uninstallLpClient", resp.StatusCode, string(body))
		}
	}
}

// BuildInstallDeploymentRequest instantiates a HTTP request object with method
// and path set to call the "installCtrlPanel" service "installDeployment"
// endpoint
func (c *Client) BuildInstallDeploymentRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: InstallDeploymentInstallCtrlPanelPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("installCtrlPanel", "installDeployment", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeInstallDeploymentRequest returns an encoder for requests sent to the
// installCtrlPanel installDeployment server.
func EncodeInstallDeploymentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*installctrlpanel.InstallDeploymentPayload)
		if !ok {
			return goahttp.ErrInvalidType("installCtrlPanel", "installDeployment", "*installctrlpanel.InstallDeploymentPayload", v)
		}
		body := NewInstallDeploymentRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("installCtrlPanel", "installDeployment", err)
		}
		return nil
	}
}

// DecodeInstallDeploymentResponse returns a decoder for responses returned by
// the installCtrlPanel installDeployment endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeInstallDeploymentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body InstallDeploymentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("installCtrlPanel", "installDeployment", err)
			}
			res := NewInstallDeploymentResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("installCtrlPanel", "installDeployment", resp.StatusCode, string(body))
		}
	}
}

// BuildUninstallDeploymentRequest instantiates a HTTP request object with
// method and path set to call the "installCtrlPanel" service
// "uninstallDeployment" endpoint
func (c *Client) BuildUninstallDeploymentRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UninstallDeploymentInstallCtrlPanelPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("installCtrlPanel", "uninstallDeployment", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUninstallDeploymentRequest returns an encoder for requests sent to the
// installCtrlPanel uninstallDeployment server.
func EncodeUninstallDeploymentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*installctrlpanel.UninstallDeploymentPayload)
		if !ok {
			return goahttp.ErrInvalidType("installCtrlPanel", "uninstallDeployment", "*installctrlpanel.UninstallDeploymentPayload", v)
		}
		body := NewUninstallDeploymentRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("installCtrlPanel", "uninstallDeployment", err)
		}
		return nil
	}
}

// DecodeUninstallDeploymentResponse returns a decoder for responses returned
// by the installCtrlPanel uninstallDeployment endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeUninstallDeploymentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UninstallDeploymentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("installCtrlPanel", "uninstallDeployment", err)
			}
			res := NewUninstallDeploymentResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("installCtrlPanel", "uninstallDeployment", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateDeploymentRequest instantiates a HTTP request object with method
// and path set to call the "installCtrlPanel" service "updateDeployment"
// endpoint
func (c *Client) BuildUpdateDeploymentRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateDeploymentInstallCtrlPanelPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("installCtrlPanel", "updateDeployment", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateDeploymentRequest returns an encoder for requests sent to the
// installCtrlPanel updateDeployment server.
func EncodeUpdateDeploymentRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*installctrlpanel.UpdateDeploymentPayload)
		if !ok {
			return goahttp.ErrInvalidType("installCtrlPanel", "updateDeployment", "*installctrlpanel.UpdateDeploymentPayload", v)
		}
		body := NewUpdateDeploymentRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("installCtrlPanel", "updateDeployment", err)
		}
		return nil
	}
}

// DecodeUpdateDeploymentResponse returns a decoder for responses returned by
// the installCtrlPanel updateDeployment endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeUpdateDeploymentResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateDeploymentResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("installCtrlPanel", "updateDeployment", err)
			}
			res := NewUpdateDeploymentResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("installCtrlPanel", "updateDeployment", resp.StatusCode, string(body))
		}
	}
}

// unmarshalCtrlDeploayItemResponseBodyToInstallctrlpanelCtrlDeploayItem builds
// a value of type *installctrlpanel.CtrlDeploayItem from a value of type
// *CtrlDeploayItemResponseBody.
func unmarshalCtrlDeploayItemResponseBodyToInstallctrlpanelCtrlDeploayItem(v *CtrlDeploayItemResponseBody) *installctrlpanel.CtrlDeploayItem {
	if v == nil {
		return nil
	}
	res := &installctrlpanel.CtrlDeploayItem{
		InstallType:    v.InstallType,
		Name:           v.Name,
		Status:         v.Status,
		InstallContext: v.InstallContext,
		Yaml:           v.Yaml,
	}

	return res
}

// marshalInstallctrlpanelAmmClientSetupConfigToAmmClientSetupConfigRequestBody
// builds a value of type *AmmClientSetupConfigRequestBody from a value of type
// *installctrlpanel.AmmClientSetupConfig.
func marshalInstallctrlpanelAmmClientSetupConfigToAmmClientSetupConfigRequestBody(v *installctrlpanel.AmmClientSetupConfig) *AmmClientSetupConfigRequestBody {
	res := &AmmClientSetupConfigRequestBody{
		ImageRepository:       v.ImageRepository,
		ServiceName:           v.ServiceName,
		DeploymentName:        v.DeploymentName,
		Type:                  v.Type,
		StartBlock:            v.StartBlock,
		RPCURL:                v.RPCURL,
		ConnectionNodeurl:     v.ConnectionNodeurl,
		ConnectionWalleturl:   v.ConnectionWalleturl,
		ConnectionHelperurl:   v.ConnectionHelperurl,
		ConnectionExplorerurl: v.ConnectionExplorerurl,
		AwsAccessKeyID:        v.AwsAccessKeyID,
		ContainerPort:         v.ContainerPort,
		AwsSecretAccessKey:    v.AwsSecretAccessKey,
		Install:               v.Install,
	}
	if v.CustomEnv != nil {
		res.CustomEnv = make([]*DeploymentSetupConfigEnvItemRequestBody, len(v.CustomEnv))
		for i, val := range v.CustomEnv {
			res.CustomEnv[i] = marshalInstallctrlpanelDeploymentSetupConfigEnvItemToDeploymentSetupConfigEnvItemRequestBody(val)
		}
	}

	return res
}

// marshalInstallctrlpanelDeploymentSetupConfigEnvItemToDeploymentSetupConfigEnvItemRequestBody
// builds a value of type *DeploymentSetupConfigEnvItemRequestBody from a value
// of type *installctrlpanel.DeploymentSetupConfigEnvItem.
func marshalInstallctrlpanelDeploymentSetupConfigEnvItemToDeploymentSetupConfigEnvItemRequestBody(v *installctrlpanel.DeploymentSetupConfigEnvItem) *DeploymentSetupConfigEnvItemRequestBody {
	if v == nil {
		return nil
	}
	res := &DeploymentSetupConfigEnvItemRequestBody{
		Key:   v.Key,
		Value: v.Value,
	}

	return res
}

// marshalAmmClientSetupConfigRequestBodyToInstallctrlpanelAmmClientSetupConfig
// builds a value of type *installctrlpanel.AmmClientSetupConfig from a value
// of type *AmmClientSetupConfigRequestBody.
func marshalAmmClientSetupConfigRequestBodyToInstallctrlpanelAmmClientSetupConfig(v *AmmClientSetupConfigRequestBody) *installctrlpanel.AmmClientSetupConfig {
	res := &installctrlpanel.AmmClientSetupConfig{
		ImageRepository:       v.ImageRepository,
		ServiceName:           v.ServiceName,
		DeploymentName:        v.DeploymentName,
		Type:                  v.Type,
		StartBlock:            v.StartBlock,
		RPCURL:                v.RPCURL,
		ConnectionNodeurl:     v.ConnectionNodeurl,
		ConnectionWalleturl:   v.ConnectionWalleturl,
		ConnectionHelperurl:   v.ConnectionHelperurl,
		ConnectionExplorerurl: v.ConnectionExplorerurl,
		AwsAccessKeyID:        v.AwsAccessKeyID,
		ContainerPort:         v.ContainerPort,
		AwsSecretAccessKey:    v.AwsSecretAccessKey,
		Install:               v.Install,
	}
	if v.CustomEnv != nil {
		res.CustomEnv = make([]*installctrlpanel.DeploymentSetupConfigEnvItem, len(v.CustomEnv))
		for i, val := range v.CustomEnv {
			res.CustomEnv[i] = marshalDeploymentSetupConfigEnvItemRequestBodyToInstallctrlpanelDeploymentSetupConfigEnvItem(val)
		}
	}

	return res
}

// marshalDeploymentSetupConfigEnvItemRequestBodyToInstallctrlpanelDeploymentSetupConfigEnvItem
// builds a value of type *installctrlpanel.DeploymentSetupConfigEnvItem from a
// value of type *DeploymentSetupConfigEnvItemRequestBody.
func marshalDeploymentSetupConfigEnvItemRequestBodyToInstallctrlpanelDeploymentSetupConfigEnvItem(v *DeploymentSetupConfigEnvItemRequestBody) *installctrlpanel.DeploymentSetupConfigEnvItem {
	if v == nil {
		return nil
	}
	res := &installctrlpanel.DeploymentSetupConfigEnvItem{
		Key:   v.Key,
		Value: v.Value,
	}

	return res
}

// marshalInstallctrlpanelAmmClientUnSetupConfigToAmmClientUnSetupConfigRequestBody
// builds a value of type *AmmClientUnSetupConfigRequestBody from a value of
// type *installctrlpanel.AmmClientUnSetupConfig.
func marshalInstallctrlpanelAmmClientUnSetupConfigToAmmClientUnSetupConfigRequestBody(v *installctrlpanel.AmmClientUnSetupConfig) *AmmClientUnSetupConfigRequestBody {
	res := &AmmClientUnSetupConfigRequestBody{
		Type:      v.Type,
		Uninstall: v.Uninstall,
	}

	return res
}

// marshalAmmClientUnSetupConfigRequestBodyToInstallctrlpanelAmmClientUnSetupConfig
// builds a value of type *installctrlpanel.AmmClientUnSetupConfig from a value
// of type *AmmClientUnSetupConfigRequestBody.
func marshalAmmClientUnSetupConfigRequestBodyToInstallctrlpanelAmmClientUnSetupConfig(v *AmmClientUnSetupConfigRequestBody) *installctrlpanel.AmmClientUnSetupConfig {
	res := &installctrlpanel.AmmClientUnSetupConfig{
		Type:      v.Type,
		Uninstall: v.Uninstall,
	}

	return res
}

// marshalInstallctrlpanelDeploymentSetupConfigToDeploymentSetupConfigRequestBody
// builds a value of type *DeploymentSetupConfigRequestBody from a value of
// type *installctrlpanel.DeploymentSetupConfig.
func marshalInstallctrlpanelDeploymentSetupConfigToDeploymentSetupConfigRequestBody(v *installctrlpanel.DeploymentSetupConfig) *DeploymentSetupConfigRequestBody {
	res := &DeploymentSetupConfigRequestBody{
		ImageRepository: v.ImageRepository,
		ContainerPort:   v.ContainerPort,
		Install:         v.Install,
		InstallType:     v.InstallType,
		Name:            v.Name,
	}
	if v.CustomEnv != nil {
		res.CustomEnv = make([]*DeploymentSetupConfigEnvItemRequestBody, len(v.CustomEnv))
		for i, val := range v.CustomEnv {
			res.CustomEnv[i] = marshalInstallctrlpanelDeploymentSetupConfigEnvItemToDeploymentSetupConfigEnvItemRequestBody(val)
		}
	}

	return res
}

// marshalDeploymentSetupConfigRequestBodyToInstallctrlpanelDeploymentSetupConfig
// builds a value of type *installctrlpanel.DeploymentSetupConfig from a value
// of type *DeploymentSetupConfigRequestBody.
func marshalDeploymentSetupConfigRequestBodyToInstallctrlpanelDeploymentSetupConfig(v *DeploymentSetupConfigRequestBody) *installctrlpanel.DeploymentSetupConfig {
	res := &installctrlpanel.DeploymentSetupConfig{
		ImageRepository: v.ImageRepository,
		ContainerPort:   v.ContainerPort,
		Install:         v.Install,
		InstallType:     v.InstallType,
		Name:            v.Name,
	}
	if v.CustomEnv != nil {
		res.CustomEnv = make([]*installctrlpanel.DeploymentSetupConfigEnvItem, len(v.CustomEnv))
		for i, val := range v.CustomEnv {
			res.CustomEnv[i] = marshalDeploymentSetupConfigEnvItemRequestBodyToInstallctrlpanelDeploymentSetupConfigEnvItem(val)
		}
	}

	return res
}

// unmarshalInstallDeploymentDataResultResponseBodyToInstallctrlpanelInstallDeploymentDataResult
// builds a value of type *installctrlpanel.InstallDeploymentDataResult from a
// value of type *InstallDeploymentDataResultResponseBody.
func unmarshalInstallDeploymentDataResultResponseBodyToInstallctrlpanelInstallDeploymentDataResult(v *InstallDeploymentDataResultResponseBody) *installctrlpanel.InstallDeploymentDataResult {
	if v == nil {
		return nil
	}
	res := &installctrlpanel.InstallDeploymentDataResult{
		CmdStdout: v.CmdStdout,
		CmdStderr: v.CmdStderr,
		Template:  v.Template,
	}

	return res
}

// marshalInstallctrlpanelUnDeploymentSetupConfigToUnDeploymentSetupConfigRequestBody
// builds a value of type *UnDeploymentSetupConfigRequestBody from a value of
// type *installctrlpanel.UnDeploymentSetupConfig.
func marshalInstallctrlpanelUnDeploymentSetupConfigToUnDeploymentSetupConfigRequestBody(v *installctrlpanel.UnDeploymentSetupConfig) *UnDeploymentSetupConfigRequestBody {
	res := &UnDeploymentSetupConfigRequestBody{
		Uninstall:   v.Uninstall,
		InstallType: v.InstallType,
		Name:        v.Name,
	}

	return res
}

// marshalUnDeploymentSetupConfigRequestBodyToInstallctrlpanelUnDeploymentSetupConfig
// builds a value of type *installctrlpanel.UnDeploymentSetupConfig from a
// value of type *UnDeploymentSetupConfigRequestBody.
func marshalUnDeploymentSetupConfigRequestBodyToInstallctrlpanelUnDeploymentSetupConfig(v *UnDeploymentSetupConfigRequestBody) *installctrlpanel.UnDeploymentSetupConfig {
	res := &installctrlpanel.UnDeploymentSetupConfig{
		Uninstall:   v.Uninstall,
		InstallType: v.InstallType,
		Name:        v.Name,
	}

	return res
}

// unmarshalUnInstallDeploymentDataResultResponseBodyToInstallctrlpanelUnInstallDeploymentDataResult
// builds a value of type *installctrlpanel.UnInstallDeploymentDataResult from
// a value of type *UnInstallDeploymentDataResultResponseBody.
func unmarshalUnInstallDeploymentDataResultResponseBodyToInstallctrlpanelUnInstallDeploymentDataResult(v *UnInstallDeploymentDataResultResponseBody) *installctrlpanel.UnInstallDeploymentDataResult {
	if v == nil {
		return nil
	}
	res := &installctrlpanel.UnInstallDeploymentDataResult{
		CmdStdout: v.CmdStdout,
		CmdStderr: v.CmdStderr,
		Template:  v.Template,
	}

	return res
}

// marshalInstallctrlpanelUpdateDeploymentConfigToUpdateDeploymentConfigRequestBody
// builds a value of type *UpdateDeploymentConfigRequestBody from a value of
// type *installctrlpanel.UpdateDeploymentConfig.
func marshalInstallctrlpanelUpdateDeploymentConfigToUpdateDeploymentConfigRequestBody(v *installctrlpanel.UpdateDeploymentConfig) *UpdateDeploymentConfigRequestBody {
	res := &UpdateDeploymentConfigRequestBody{
		InstallType:    v.InstallType,
		Name:           v.Name,
		InstallContext: v.InstallContext,
		Update:         v.Update,
	}

	return res
}

// marshalUpdateDeploymentConfigRequestBodyToInstallctrlpanelUpdateDeploymentConfig
// builds a value of type *installctrlpanel.UpdateDeploymentConfig from a value
// of type *UpdateDeploymentConfigRequestBody.
func marshalUpdateDeploymentConfigRequestBodyToInstallctrlpanelUpdateDeploymentConfig(v *UpdateDeploymentConfigRequestBody) *installctrlpanel.UpdateDeploymentConfig {
	res := &installctrlpanel.UpdateDeploymentConfig{
		InstallType:    v.InstallType,
		Name:           v.Name,
		InstallContext: v.InstallContext,
		Update:         v.Update,
	}

	return res
}
