// Code generated by goa v3.11.0, DO NOT EDIT.
//
// chainConfig HTTP client types
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	chainconfig "admin-panel/gen/chain_config"
)

// SetChainListRequestBody is the type of the "chainConfig" service
// "setChainList" endpoint HTTP request body.
type SetChainListRequestBody struct {
	// listData
	ChainList []*ChainDataItemRequestBody `form:"chainList,omitempty" json:"chainList,omitempty" xml:"chainList,omitempty"`
}

// DelChainListRequestBody is the type of the "chainConfig" service
// "delChainList" endpoint HTTP request body.
type DelChainListRequestBody struct {
	// ChainId
	ChainID int64 `form:"chainId" json:"chainId" xml:"chainId"`
	// mongodb的id
	ID string `form:"_id" json:"_id" xml:"_id"`
}

// SetChainGasUsdRequestBody is the type of the "chainConfig" service
// "setChainGasUsd" endpoint HTTP request body.
type SetChainGasUsdRequestBody struct {
	// ChainId
	ChainID int64 `form:"chainId" json:"chainId" xml:"chainId"`
	// mongodb的id
	ID string `form:"_id" json:"_id" xml:"_id"`
	// usd value
	Usd int64 `form:"usd" json:"usd" xml:"usd"`
}

// SetChainClientConfigRequestBody is the type of the "chainConfig" service
// "setChainClientConfig" endpoint HTTP request body.
type SetChainClientConfigRequestBody struct {
	// ChainId
	ChainID int64 `form:"chainId" json:"chainId" xml:"chainId"`
	// JSON Stored String
	ChainData string `form:"chainData" json:"chainData" xml:"chainData"`
}

// SetChainListResponseBody is the type of the "chainConfig" service
// "setChainList" endpoint HTTP response body.
type SetChainListResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 添加成功的链
	Data    []*ChainDataItemResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Message *string                      `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DelChainListResponseBody is the type of the "chainConfig" service
// "delChainList" endpoint HTTP response body.
type DelChainListResponseBody struct {
	Code    *int64  `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Data    *int64  `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ChainListResponseBody is the type of the "chainConfig" service "chainList"
// endpoint HTTP response body.
type ChainListResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 链的列表
	Data    []*ChainDataItemResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Message *string                      `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// SetChainGasUsdResponseBody is the type of the "chainConfig" service
// "setChainGasUsd" endpoint HTTP response body.
type SetChainGasUsdResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 是否成功
	Data    *int64  `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// SetChainClientConfigResponseBody is the type of the "chainConfig" service
// "setChainClientConfig" endpoint HTTP response body.
type SetChainClientConfigResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 是否成功
	Data    *int64  `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ChainDataItemRequestBody is used to define fields on request body types.
type ChainDataItemRequestBody struct {
	// ChainId
	ChainID *int64 `form:"chainId,omitempty" json:"chainId,omitempty" xml:"chainId,omitempty"`
	// chainName
	ChainName *string `form:"chainName,omitempty" json:"chainName,omitempty" xml:"chainName,omitempty"`
	Name      *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// tokenName
	TokenName *string `form:"tokenName,omitempty" json:"tokenName,omitempty" xml:"tokenName,omitempty"`
}

// ChainDataItemResponseBody is used to define fields on response body types.
type ChainDataItemResponseBody struct {
	// ChainId
	ChainID *int64 `form:"chainId,omitempty" json:"chainId,omitempty" xml:"chainId,omitempty"`
	// chainName
	ChainName *string `form:"chainName,omitempty" json:"chainName,omitempty" xml:"chainName,omitempty"`
	Name      *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// tokenName
	TokenName *string `form:"tokenName,omitempty" json:"tokenName,omitempty" xml:"tokenName,omitempty"`
}

// NewSetChainListRequestBody builds the HTTP request body from the payload of
// the "setChainList" endpoint of the "chainConfig" service.
func NewSetChainListRequestBody(p *chainconfig.SetChainListPayload) *SetChainListRequestBody {
	body := &SetChainListRequestBody{}
	if p.ChainList != nil {
		body.ChainList = make([]*ChainDataItemRequestBody, len(p.ChainList))
		for i, val := range p.ChainList {
			body.ChainList[i] = marshalChainconfigChainDataItemToChainDataItemRequestBody(val)
		}
	}
	return body
}

// NewDelChainListRequestBody builds the HTTP request body from the payload of
// the "delChainList" endpoint of the "chainConfig" service.
func NewDelChainListRequestBody(p *chainconfig.DelChainListPayload) *DelChainListRequestBody {
	body := &DelChainListRequestBody{
		ChainID: p.ChainID,
		ID:      p.ID,
	}
	return body
}

// NewSetChainGasUsdRequestBody builds the HTTP request body from the payload
// of the "setChainGasUsd" endpoint of the "chainConfig" service.
func NewSetChainGasUsdRequestBody(p *chainconfig.SetChainGasUsdPayload) *SetChainGasUsdRequestBody {
	body := &SetChainGasUsdRequestBody{
		ChainID: p.ChainID,
		ID:      p.ID,
		Usd:     p.Usd,
	}
	return body
}

// NewSetChainClientConfigRequestBody builds the HTTP request body from the
// payload of the "setChainClientConfig" endpoint of the "chainConfig" service.
func NewSetChainClientConfigRequestBody(p *chainconfig.SetChainClientConfigPayload) *SetChainClientConfigRequestBody {
	body := &SetChainClientConfigRequestBody{
		ChainID:   p.ChainID,
		ChainData: p.ChainData,
	}
	return body
}

// NewSetChainListResultOK builds a "chainConfig" service "setChainList"
// endpoint result from a HTTP "OK" response.
func NewSetChainListResultOK(body *SetChainListResponseBody) *chainconfig.SetChainListResult {
	v := &chainconfig.SetChainListResult{
		Code:    body.Code,
		Message: body.Message,
	}
	if body.Data != nil {
		v.Data = make([]*chainconfig.ChainDataItem, len(body.Data))
		for i, val := range body.Data {
			v.Data[i] = unmarshalChainDataItemResponseBodyToChainconfigChainDataItem(val)
		}
	}

	return v
}

// NewDelChainListResultOK builds a "chainConfig" service "delChainList"
// endpoint result from a HTTP "OK" response.
func NewDelChainListResultOK(body *DelChainListResponseBody) *chainconfig.DelChainListResult {
	v := &chainconfig.DelChainListResult{
		Code:    body.Code,
		Data:    body.Data,
		Message: body.Message,
	}

	return v
}

// NewChainListResultOK builds a "chainConfig" service "chainList" endpoint
// result from a HTTP "OK" response.
func NewChainListResultOK(body *ChainListResponseBody) *chainconfig.ChainListResult {
	v := &chainconfig.ChainListResult{
		Code:    body.Code,
		Message: body.Message,
	}
	if body.Data != nil {
		v.Data = make([]*chainconfig.ChainDataItem, len(body.Data))
		for i, val := range body.Data {
			v.Data[i] = unmarshalChainDataItemResponseBodyToChainconfigChainDataItem(val)
		}
	}

	return v
}

// NewSetChainGasUsdResultOK builds a "chainConfig" service "setChainGasUsd"
// endpoint result from a HTTP "OK" response.
func NewSetChainGasUsdResultOK(body *SetChainGasUsdResponseBody) *chainconfig.SetChainGasUsdResult {
	v := &chainconfig.SetChainGasUsdResult{
		Code:    body.Code,
		Data:    body.Data,
		Message: body.Message,
	}

	return v
}

// NewSetChainClientConfigResultOK builds a "chainConfig" service
// "setChainClientConfig" endpoint result from a HTTP "OK" response.
func NewSetChainClientConfigResultOK(body *SetChainClientConfigResponseBody) *chainconfig.SetChainClientConfigResult {
	v := &chainconfig.SetChainClientConfigResult{
		Code:    body.Code,
		Data:    body.Data,
		Message: body.Message,
	}

	return v
}
