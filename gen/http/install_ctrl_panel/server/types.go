// Code generated by goa v3.11.0, DO NOT EDIT.
//
// installCtrlPanel HTTP server types
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	installctrlpanel "admin-panel/gen/install_ctrl_panel"

	goa "goa.design/goa/v3/pkg"
)

// ListInstallRequestBody is the type of the "installCtrlPanel" service
// "listInstall" endpoint HTTP request body.
type ListInstallRequestBody struct {
	// 安装的服务类型
	InstallType *string `form:"installType,omitempty" json:"installType,omitempty" xml:"installType,omitempty"`
}

// InstallLpClientRequestBody is the type of the "installCtrlPanel" service
// "installLpClient" endpoint HTTP request body.
type InstallLpClientRequestBody struct {
	// ammClientInstallConfig
	SetupConfig *AmmClientSetupConfigRequestBody `form:"setupConfig,omitempty" json:"setupConfig,omitempty" xml:"setupConfig,omitempty"`
}

// UninstallLpClientRequestBody is the type of the "installCtrlPanel" service
// "uninstallLpClient" endpoint HTTP request body.
type UninstallLpClientRequestBody struct {
	// ammClientUninstallConfig
	SetupConfig *AmmClientUnSetupConfigRequestBody `form:"setupConfig,omitempty" json:"setupConfig,omitempty" xml:"setupConfig,omitempty"`
}

// InstallDeploymentRequestBody is the type of the "installCtrlPanel" service
// "installDeployment" endpoint HTTP request body.
type InstallDeploymentRequestBody struct {
	// deploymentSetupConfig
	SetupConfig *DeploymentSetupConfigRequestBody `form:"setupConfig,omitempty" json:"setupConfig,omitempty" xml:"setupConfig,omitempty"`
}

// UninstallDeploymentRequestBody is the type of the "installCtrlPanel" service
// "uninstallDeployment" endpoint HTTP request body.
type UninstallDeploymentRequestBody struct {
	// UnDeploymentSetupConfig
	SetupConfig *UnDeploymentSetupConfigRequestBody `form:"setupConfig,omitempty" json:"setupConfig,omitempty" xml:"setupConfig,omitempty"`
}

// UpdateDeploymentRequestBody is the type of the "installCtrlPanel" service
// "updateDeployment" endpoint HTTP request body.
type UpdateDeploymentRequestBody struct {
	// updateDeploymentConfig
	SetupConfig *UpdateDeploymentConfigRequestBody `form:"setupConfig,omitempty" json:"setupConfig,omitempty" xml:"setupConfig,omitempty"`
}

// ListInstallResponseBody is the type of the "installCtrlPanel" service
// "listInstall" endpoint HTTP response body.
type ListInstallResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 已经安装的列表
	Result  []*CtrlDeploayItemResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string                        `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// InstallLpClientResponseBody is the type of the "installCtrlPanel" service
// "installLpClient" endpoint HTTP response body.
type InstallLpClientResponseBody struct {
	Code   *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Result *struct {
		// 渲染后的模版内容
		Template  *string `form:"Template" json:"Template" xml:"Template"`
		CmdStdout *string `form:"CmdStdout" json:"CmdStdout" xml:"CmdStdout"`
		CmdStderr *string `form:"CmdStderr" json:"CmdStderr" xml:"CmdStderr"`
	} `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UninstallLpClientResponseBody is the type of the "installCtrlPanel" service
// "uninstallLpClient" endpoint HTTP response body.
type UninstallLpClientResponseBody struct {
	Code   *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Result *struct {
		// 渲染后的模版内容
		Template  *string `form:"Template" json:"Template" xml:"Template"`
		CmdStdout *string `form:"CmdStdout" json:"CmdStdout" xml:"CmdStdout"`
		CmdStderr *string `form:"CmdStderr" json:"CmdStderr" xml:"CmdStderr"`
	} `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// InstallDeploymentResponseBody is the type of the "installCtrlPanel" service
// "installDeployment" endpoint HTTP response body.
type InstallDeploymentResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 安装完成的结果
	Result  *InstallDeploymentDataResultResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string                                  `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UninstallDeploymentResponseBody is the type of the "installCtrlPanel"
// service "uninstallDeployment" endpoint HTTP response body.
type UninstallDeploymentResponseBody struct {
	Code    *int64                                     `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Result  *UnInstallDeploymentDataResultResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string                                    `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateDeploymentResponseBody is the type of the "installCtrlPanel" service
// "updateDeployment" endpoint HTTP response body.
type UpdateDeploymentResponseBody struct {
	Code   *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Result *struct {
		CmdStdout *string `form:"CmdStdout" json:"CmdStdout" xml:"CmdStdout"`
		CmdStderr *string `form:"CmdStderr" json:"CmdStderr" xml:"CmdStderr"`
		// 渲染后的模版内容
		Template *string `form:"Template" json:"Template" xml:"Template"`
	} `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CtrlDeploayItemResponseBody is used to define fields on response body types.
type CtrlDeploayItemResponseBody struct {
	// 安装的类型 Client Amm Market等等...
	InstallType *string `form:"installType,omitempty" json:"installType,omitempty" xml:"installType,omitempty"`
	// 具体的服务名称，如bsc avax
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 服务当前的安装状态
	Status *int64 `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// 之前安装的上下文
	InstallContext *string `form:"installContext,omitempty" json:"installContext,omitempty" xml:"installContext,omitempty"`
	// 安装模版的原始内容
	Yaml *string `form:"yaml,omitempty" json:"yaml,omitempty" xml:"yaml,omitempty"`
}

// InstallDeploymentDataResultResponseBody is used to define fields on response
// body types.
type InstallDeploymentDataResultResponseBody struct {
	CmdStdout *string `form:"CmdStdout,omitempty" json:"CmdStdout,omitempty" xml:"CmdStdout,omitempty"`
	CmdStderr *string `form:"CmdStderr,omitempty" json:"CmdStderr,omitempty" xml:"CmdStderr,omitempty"`
	Template  *string `form:"Template,omitempty" json:"Template,omitempty" xml:"Template,omitempty"`
}

// UnInstallDeploymentDataResultResponseBody is used to define fields on
// response body types.
type UnInstallDeploymentDataResultResponseBody struct {
	CmdStdout *string `form:"CmdStdout,omitempty" json:"CmdStdout,omitempty" xml:"CmdStdout,omitempty"`
	CmdStderr *string `form:"CmdStderr,omitempty" json:"CmdStderr,omitempty" xml:"CmdStderr,omitempty"`
	Template  *string `form:"Template,omitempty" json:"Template,omitempty" xml:"Template,omitempty"`
}

// AmmClientSetupConfigRequestBody is used to define fields on request body
// types.
type AmmClientSetupConfigRequestBody struct {
	CustomEnv []*DeploymentSetupConfigEnvItemRequestBody `form:"customEnv,omitempty" json:"customEnv,omitempty" xml:"customEnv,omitempty"`
	// 需要安装的镜像地址
	ImageRepository *string `form:"imageRepository,omitempty" json:"imageRepository,omitempty" xml:"imageRepository,omitempty"`
	// 需要安装的ServiceName
	ServiceName *string `form:"serviceName,omitempty" json:"serviceName,omitempty" xml:"serviceName,omitempty"`
	// 需要安装的deploymentName
	DeploymentName *string `form:"deploymentName,omitempty" json:"deploymentName,omitempty" xml:"deploymentName,omitempty"`
	// 安装的类型
	Type                  *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	StartBlock            *string `form:"startBlock,omitempty" json:"startBlock,omitempty" xml:"startBlock,omitempty"`
	RPCURL                *string `form:"rpcUrl,omitempty" json:"rpcUrl,omitempty" xml:"rpcUrl,omitempty"`
	ConnectionNodeurl     *string `form:"connectionNodeurl,omitempty" json:"connectionNodeurl,omitempty" xml:"connectionNodeurl,omitempty"`
	ConnectionWalleturl   *string `form:"connectionWalleturl,omitempty" json:"connectionWalleturl,omitempty" xml:"connectionWalleturl,omitempty"`
	ConnectionHelperurl   *string `form:"connectionHelperurl,omitempty" json:"connectionHelperurl,omitempty" xml:"connectionHelperurl,omitempty"`
	ConnectionExplorerurl *string `form:"connectionExplorerurl,omitempty" json:"connectionExplorerurl,omitempty" xml:"connectionExplorerurl,omitempty"`
	AwsAccessKeyID        *string `form:"awsAccessKeyId,omitempty" json:"awsAccessKeyId,omitempty" xml:"awsAccessKeyId,omitempty"`
	ContainerPort         *string `form:"containerPort,omitempty" json:"containerPort,omitempty" xml:"containerPort,omitempty"`
	AwsSecretAccessKey    *string `form:"awsSecretAccessKey,omitempty" json:"awsSecretAccessKey,omitempty" xml:"awsSecretAccessKey,omitempty"`
	// 是否直接安装
	Install *bool `form:"install,omitempty" json:"install,omitempty" xml:"install,omitempty"`
}

// DeploymentSetupConfigEnvItemRequestBody is used to define fields on request
// body types.
type DeploymentSetupConfigEnvItemRequestBody struct {
	Key   *string `form:"key,omitempty" json:"key,omitempty" xml:"key,omitempty"`
	Value *string `form:"value,omitempty" json:"value,omitempty" xml:"value,omitempty"`
}

// AmmClientUnSetupConfigRequestBody is used to define fields on request body
// types.
type AmmClientUnSetupConfigRequestBody struct {
	// 安装的类型
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// 是否直接操作
	Uninstall *bool `form:"uninstall,omitempty" json:"uninstall,omitempty" xml:"uninstall,omitempty"`
}

// DeploymentSetupConfigRequestBody is used to define fields on request body
// types.
type DeploymentSetupConfigRequestBody struct {
	// 需要安装的镜像地址
	ImageRepository *string `form:"imageRepository,omitempty" json:"imageRepository,omitempty" xml:"imageRepository,omitempty"`
	// 容器的端口 可选
	ContainerPort *string `form:"containerPort,omitempty" json:"containerPort,omitempty" xml:"containerPort,omitempty"`
	// 是否直接安装
	Install     *bool   `form:"install,omitempty" json:"install,omitempty" xml:"install,omitempty"`
	InstallType *string `form:"installType,omitempty" json:"installType,omitempty" xml:"installType,omitempty"`
	// 这个服务叫什么名字
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Env配置列表
	CustomEnv []*DeploymentSetupConfigEnvItemRequestBody `form:"customEnv,omitempty" json:"customEnv,omitempty" xml:"customEnv,omitempty"`
}

// UnDeploymentSetupConfigRequestBody is used to define fields on request body
// types.
type UnDeploymentSetupConfigRequestBody struct {
	// 是否直接卸载
	Uninstall   *bool   `form:"uninstall,omitempty" json:"uninstall,omitempty" xml:"uninstall,omitempty"`
	InstallType *string `form:"installType,omitempty" json:"installType,omitempty" xml:"installType,omitempty"`
	Name        *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// UpdateDeploymentConfigRequestBody is used to define fields on request body
// types.
type UpdateDeploymentConfigRequestBody struct {
	InstallType    *string `form:"installType,omitempty" json:"installType,omitempty" xml:"installType,omitempty"`
	Name           *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	InstallContext *string `form:"installContext,omitempty" json:"installContext,omitempty" xml:"installContext,omitempty"`
	Update         *bool   `form:"update,omitempty" json:"update,omitempty" xml:"update,omitempty"`
}

// NewListInstallResponseBody builds the HTTP response body from the result of
// the "listInstall" endpoint of the "installCtrlPanel" service.
func NewListInstallResponseBody(res *installctrlpanel.ListInstallResult) *ListInstallResponseBody {
	body := &ListInstallResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Result != nil {
		body.Result = make([]*CtrlDeploayItemResponseBody, len(res.Result))
		for i, val := range res.Result {
			body.Result[i] = marshalInstallctrlpanelCtrlDeploayItemToCtrlDeploayItemResponseBody(val)
		}
	}
	return body
}

// NewInstallLpClientResponseBody builds the HTTP response body from the result
// of the "installLpClient" endpoint of the "installCtrlPanel" service.
func NewInstallLpClientResponseBody(res *installctrlpanel.InstallLpClientResult) *InstallLpClientResponseBody {
	body := &InstallLpClientResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Result != nil {
		body.Result = &struct {
			// 渲染后的模版内容
			Template  *string `form:"Template" json:"Template" xml:"Template"`
			CmdStdout *string `form:"CmdStdout" json:"CmdStdout" xml:"CmdStdout"`
			CmdStderr *string `form:"CmdStderr" json:"CmdStderr" xml:"CmdStderr"`
		}{
			Template:  res.Result.Template,
			CmdStdout: res.Result.CmdStdout,
			CmdStderr: res.Result.CmdStderr,
		}
	}
	return body
}

// NewUninstallLpClientResponseBody builds the HTTP response body from the
// result of the "uninstallLpClient" endpoint of the "installCtrlPanel" service.
func NewUninstallLpClientResponseBody(res *installctrlpanel.UninstallLpClientResult) *UninstallLpClientResponseBody {
	body := &UninstallLpClientResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Result != nil {
		body.Result = &struct {
			// 渲染后的模版内容
			Template  *string `form:"Template" json:"Template" xml:"Template"`
			CmdStdout *string `form:"CmdStdout" json:"CmdStdout" xml:"CmdStdout"`
			CmdStderr *string `form:"CmdStderr" json:"CmdStderr" xml:"CmdStderr"`
		}{
			Template:  res.Result.Template,
			CmdStdout: res.Result.CmdStdout,
			CmdStderr: res.Result.CmdStderr,
		}
	}
	return body
}

// NewInstallDeploymentResponseBody builds the HTTP response body from the
// result of the "installDeployment" endpoint of the "installCtrlPanel" service.
func NewInstallDeploymentResponseBody(res *installctrlpanel.InstallDeploymentResult) *InstallDeploymentResponseBody {
	body := &InstallDeploymentResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Result != nil {
		body.Result = marshalInstallctrlpanelInstallDeploymentDataResultToInstallDeploymentDataResultResponseBody(res.Result)
	}
	return body
}

// NewUninstallDeploymentResponseBody builds the HTTP response body from the
// result of the "uninstallDeployment" endpoint of the "installCtrlPanel"
// service.
func NewUninstallDeploymentResponseBody(res *installctrlpanel.UninstallDeploymentResult) *UninstallDeploymentResponseBody {
	body := &UninstallDeploymentResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Result != nil {
		body.Result = marshalInstallctrlpanelUnInstallDeploymentDataResultToUnInstallDeploymentDataResultResponseBody(res.Result)
	}
	return body
}

// NewUpdateDeploymentResponseBody builds the HTTP response body from the
// result of the "updateDeployment" endpoint of the "installCtrlPanel" service.
func NewUpdateDeploymentResponseBody(res *installctrlpanel.UpdateDeploymentResult) *UpdateDeploymentResponseBody {
	body := &UpdateDeploymentResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Result != nil {
		body.Result = &struct {
			CmdStdout *string `form:"CmdStdout" json:"CmdStdout" xml:"CmdStdout"`
			CmdStderr *string `form:"CmdStderr" json:"CmdStderr" xml:"CmdStderr"`
			// 渲染后的模版内容
			Template *string `form:"Template" json:"Template" xml:"Template"`
		}{
			CmdStdout: res.Result.CmdStdout,
			CmdStderr: res.Result.CmdStderr,
			Template:  res.Result.Template,
		}
	}
	return body
}

// NewListInstallPayload builds a installCtrlPanel service listInstall endpoint
// payload.
func NewListInstallPayload(body *ListInstallRequestBody) *installctrlpanel.ListInstallPayload {
	v := &installctrlpanel.ListInstallPayload{
		InstallType: *body.InstallType,
	}

	return v
}

// NewInstallLpClientPayload builds a installCtrlPanel service installLpClient
// endpoint payload.
func NewInstallLpClientPayload(body *InstallLpClientRequestBody) *installctrlpanel.InstallLpClientPayload {
	v := &installctrlpanel.InstallLpClientPayload{}
	v.SetupConfig = unmarshalAmmClientSetupConfigRequestBodyToInstallctrlpanelAmmClientSetupConfig(body.SetupConfig)

	return v
}

// NewUninstallLpClientPayload builds a installCtrlPanel service
// uninstallLpClient endpoint payload.
func NewUninstallLpClientPayload(body *UninstallLpClientRequestBody) *installctrlpanel.UninstallLpClientPayload {
	v := &installctrlpanel.UninstallLpClientPayload{}
	v.SetupConfig = unmarshalAmmClientUnSetupConfigRequestBodyToInstallctrlpanelAmmClientUnSetupConfig(body.SetupConfig)

	return v
}

// NewInstallDeploymentPayload builds a installCtrlPanel service
// installDeployment endpoint payload.
func NewInstallDeploymentPayload(body *InstallDeploymentRequestBody) *installctrlpanel.InstallDeploymentPayload {
	v := &installctrlpanel.InstallDeploymentPayload{}
	v.SetupConfig = unmarshalDeploymentSetupConfigRequestBodyToInstallctrlpanelDeploymentSetupConfig(body.SetupConfig)

	return v
}

// NewUninstallDeploymentPayload builds a installCtrlPanel service
// uninstallDeployment endpoint payload.
func NewUninstallDeploymentPayload(body *UninstallDeploymentRequestBody) *installctrlpanel.UninstallDeploymentPayload {
	v := &installctrlpanel.UninstallDeploymentPayload{}
	v.SetupConfig = unmarshalUnDeploymentSetupConfigRequestBodyToInstallctrlpanelUnDeploymentSetupConfig(body.SetupConfig)

	return v
}

// NewUpdateDeploymentPayload builds a installCtrlPanel service
// updateDeployment endpoint payload.
func NewUpdateDeploymentPayload(body *UpdateDeploymentRequestBody) *installctrlpanel.UpdateDeploymentPayload {
	v := &installctrlpanel.UpdateDeploymentPayload{}
	v.SetupConfig = unmarshalUpdateDeploymentConfigRequestBodyToInstallctrlpanelUpdateDeploymentConfig(body.SetupConfig)

	return v
}

// ValidateListInstallRequestBody runs the validations defined on
// ListInstallRequestBody
func ValidateListInstallRequestBody(body *ListInstallRequestBody) (err error) {
	if body.InstallType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("installType", "body"))
	}
	return
}

// ValidateInstallLpClientRequestBody runs the validations defined on
// InstallLpClientRequestBody
func ValidateInstallLpClientRequestBody(body *InstallLpClientRequestBody) (err error) {
	if body.SetupConfig == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("setupConfig", "body"))
	}
	if body.SetupConfig != nil {
		if err2 := ValidateAmmClientSetupConfigRequestBody(body.SetupConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUninstallLpClientRequestBody runs the validations defined on
// UninstallLpClientRequestBody
func ValidateUninstallLpClientRequestBody(body *UninstallLpClientRequestBody) (err error) {
	if body.SetupConfig == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("setupConfig", "body"))
	}
	return
}

// ValidateInstallDeploymentRequestBody runs the validations defined on
// InstallDeploymentRequestBody
func ValidateInstallDeploymentRequestBody(body *InstallDeploymentRequestBody) (err error) {
	if body.SetupConfig == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("setupConfig", "body"))
	}
	if body.SetupConfig != nil {
		if err2 := ValidateDeploymentSetupConfigRequestBody(body.SetupConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUninstallDeploymentRequestBody runs the validations defined on
// UninstallDeploymentRequestBody
func ValidateUninstallDeploymentRequestBody(body *UninstallDeploymentRequestBody) (err error) {
	if body.SetupConfig == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("setupConfig", "body"))
	}
	if body.SetupConfig != nil {
		if err2 := ValidateUnDeploymentSetupConfigRequestBody(body.SetupConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateUpdateDeploymentRequestBody runs the validations defined on
// UpdateDeploymentRequestBody
func ValidateUpdateDeploymentRequestBody(body *UpdateDeploymentRequestBody) (err error) {
	if body.SetupConfig == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("setupConfig", "body"))
	}
	if body.SetupConfig != nil {
		if err2 := ValidateUpdateDeploymentConfigRequestBody(body.SetupConfig); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateAmmClientSetupConfigRequestBody runs the validations defined on
// ammClientSetupConfigRequestBody
func ValidateAmmClientSetupConfigRequestBody(body *AmmClientSetupConfigRequestBody) (err error) {
	if body.ImageRepository == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("imageRepository", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.Install == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("install", "body"))
	}
	return
}

// ValidateDeploymentSetupConfigRequestBody runs the validations defined on
// DeploymentSetupConfigRequestBody
func ValidateDeploymentSetupConfigRequestBody(body *DeploymentSetupConfigRequestBody) (err error) {
	if body.InstallType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("installType", "body"))
	}
	if body.Install == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("install", "body"))
	}
	if body.ImageRepository == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("imageRepository", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.InstallType != nil {
		if !(*body.InstallType == "ammClient" || *body.InstallType == "market" || *body.InstallType == "amm" || *body.InstallType == "userApp") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.installType", *body.InstallType, []interface{}{"ammClient", "market", "amm", "userApp"}))
		}
	}
	return
}

// ValidateUnDeploymentSetupConfigRequestBody runs the validations defined on
// UnDeploymentSetupConfigRequestBody
func ValidateUnDeploymentSetupConfigRequestBody(body *UnDeploymentSetupConfigRequestBody) (err error) {
	if body.InstallType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("installType", "body"))
	}
	if body.Uninstall == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uninstall", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateUpdateDeploymentConfigRequestBody runs the validations defined on
// updateDeploymentConfigRequestBody
func ValidateUpdateDeploymentConfigRequestBody(body *UpdateDeploymentConfigRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.InstallType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("installType", "body"))
	}
	if body.Update == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("update", "body"))
	}
	return
}
