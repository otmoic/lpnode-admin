// Code generated by goa v3.11.0, DO NOT EDIT.
//
// chainConfig HTTP server types
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	chainconfig "admin-panel/gen/chain_config"

	goa "goa.design/goa/v3/pkg"
)

// SetChainListRequestBody is the type of the "chainConfig" service
// "setChainList" endpoint HTTP request body.
type SetChainListRequestBody struct {
	// listData
	ChainList []*ChainDataItemRequestBody `form:"chainList,omitempty" json:"chainList,omitempty" xml:"chainList,omitempty"`
}

// DelChainListRequestBody is the type of the "chainConfig" service
// "delChainList" endpoint HTTP request body.
type DelChainListRequestBody struct {
	// ChainId
	ChainID *int64 `form:"chainId,omitempty" json:"chainId,omitempty" xml:"chainId,omitempty"`
	// mongodb id
	ID *string `form:"_id,omitempty" json:"_id,omitempty" xml:"_id,omitempty"`
}

// SetChainGasUsdRequestBody is the type of the "chainConfig" service
// "setChainGasUsd" endpoint HTTP request body.
type SetChainGasUsdRequestBody struct {
	// ChainId
	ChainID *int64 `form:"chainId,omitempty" json:"chainId,omitempty" xml:"chainId,omitempty"`
	// mongodb id
	ID *string `form:"_id,omitempty" json:"_id,omitempty" xml:"_id,omitempty"`
	// usd value
	Usd *int64 `form:"usd,omitempty" json:"usd,omitempty" xml:"usd,omitempty"`
}

// SetChainClientConfigRequestBody is the type of the "chainConfig" service
// "setChainClientConfig" endpoint HTTP request body.
type SetChainClientConfigRequestBody struct {
	// ChainId
	ChainID *int64 `form:"chainId,omitempty" json:"chainId,omitempty" xml:"chainId,omitempty"`
	// JSON Stored String
	ChainData *string `form:"chainData,omitempty" json:"chainData,omitempty" xml:"chainData,omitempty"`
}

// SetChainListResponseBody is the type of the "chainConfig" service
// "setChainList" endpoint HTTP response body.
type SetChainListResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// result
	Data    []*ChainDataItemResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Message *string                      `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DelChainListResponseBody is the type of the "chainConfig" service
// "delChainList" endpoint HTTP response body.
type DelChainListResponseBody struct {
	Code    *int64  `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Data    *int64  `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ChainListResponseBody is the type of the "chainConfig" service "chainList"
// endpoint HTTP response body.
type ChainListResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// chain list
	Data    []*ChainDataItemResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Message *string                      `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// SetChainGasUsdResponseBody is the type of the "chainConfig" service
// "setChainGasUsd" endpoint HTTP response body.
type SetChainGasUsdResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// result
	Data    *int64  `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// SetChainClientConfigResponseBody is the type of the "chainConfig" service
// "setChainClientConfig" endpoint HTTP response body.
type SetChainClientConfigResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// result
	Data    *int64  `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ChainDataItemResponseBody is used to define fields on response body types.
type ChainDataItemResponseBody struct {
	// ChainId
	ChainID *int64 `form:"chainId,omitempty" json:"chainId,omitempty" xml:"chainId,omitempty"`
	// chainName
	ChainName *string `form:"chainName,omitempty" json:"chainName,omitempty" xml:"chainName,omitempty"`
	Name      *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// tokenName
	TokenName *string `form:"tokenName,omitempty" json:"tokenName,omitempty" xml:"tokenName,omitempty"`
}

// ChainDataItemRequestBody is used to define fields on request body types.
type ChainDataItemRequestBody struct {
	// ChainId
	ChainID *int64 `form:"chainId,omitempty" json:"chainId,omitempty" xml:"chainId,omitempty"`
	// chainName
	ChainName *string `form:"chainName,omitempty" json:"chainName,omitempty" xml:"chainName,omitempty"`
	Name      *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// tokenName
	TokenName *string `form:"tokenName,omitempty" json:"tokenName,omitempty" xml:"tokenName,omitempty"`
}

// NewSetChainListResponseBody builds the HTTP response body from the result of
// the "setChainList" endpoint of the "chainConfig" service.
func NewSetChainListResponseBody(res *chainconfig.SetChainListResult) *SetChainListResponseBody {
	body := &SetChainListResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Data != nil {
		body.Data = make([]*ChainDataItemResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalChainconfigChainDataItemToChainDataItemResponseBody(val)
		}
	}
	return body
}

// NewDelChainListResponseBody builds the HTTP response body from the result of
// the "delChainList" endpoint of the "chainConfig" service.
func NewDelChainListResponseBody(res *chainconfig.DelChainListResult) *DelChainListResponseBody {
	body := &DelChainListResponseBody{
		Code:    res.Code,
		Data:    res.Data,
		Message: res.Message,
	}
	return body
}

// NewChainListResponseBody builds the HTTP response body from the result of
// the "chainList" endpoint of the "chainConfig" service.
func NewChainListResponseBody(res *chainconfig.ChainListResult) *ChainListResponseBody {
	body := &ChainListResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Data != nil {
		body.Data = make([]*ChainDataItemResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalChainconfigChainDataItemToChainDataItemResponseBody(val)
		}
	}
	return body
}

// NewSetChainGasUsdResponseBody builds the HTTP response body from the result
// of the "setChainGasUsd" endpoint of the "chainConfig" service.
func NewSetChainGasUsdResponseBody(res *chainconfig.SetChainGasUsdResult) *SetChainGasUsdResponseBody {
	body := &SetChainGasUsdResponseBody{
		Code:    res.Code,
		Data:    res.Data,
		Message: res.Message,
	}
	return body
}

// NewSetChainClientConfigResponseBody builds the HTTP response body from the
// result of the "setChainClientConfig" endpoint of the "chainConfig" service.
func NewSetChainClientConfigResponseBody(res *chainconfig.SetChainClientConfigResult) *SetChainClientConfigResponseBody {
	body := &SetChainClientConfigResponseBody{
		Code:    res.Code,
		Data:    res.Data,
		Message: res.Message,
	}
	return body
}

// NewSetChainListPayload builds a chainConfig service setChainList endpoint
// payload.
func NewSetChainListPayload(body *SetChainListRequestBody) *chainconfig.SetChainListPayload {
	v := &chainconfig.SetChainListPayload{}
	if body.ChainList != nil {
		v.ChainList = make([]*chainconfig.ChainDataItem, len(body.ChainList))
		for i, val := range body.ChainList {
			v.ChainList[i] = unmarshalChainDataItemRequestBodyToChainconfigChainDataItem(val)
		}
	}

	return v
}

// NewDelChainListPayload builds a chainConfig service delChainList endpoint
// payload.
func NewDelChainListPayload(body *DelChainListRequestBody) *chainconfig.DelChainListPayload {
	v := &chainconfig.DelChainListPayload{
		ChainID: *body.ChainID,
		ID:      *body.ID,
	}

	return v
}

// NewSetChainGasUsdPayload builds a chainConfig service setChainGasUsd
// endpoint payload.
func NewSetChainGasUsdPayload(body *SetChainGasUsdRequestBody) *chainconfig.SetChainGasUsdPayload {
	v := &chainconfig.SetChainGasUsdPayload{
		ChainID: *body.ChainID,
		ID:      *body.ID,
		Usd:     *body.Usd,
	}

	return v
}

// NewSetChainClientConfigPayload builds a chainConfig service
// setChainClientConfig endpoint payload.
func NewSetChainClientConfigPayload(body *SetChainClientConfigRequestBody) *chainconfig.SetChainClientConfigPayload {
	v := &chainconfig.SetChainClientConfigPayload{
		ChainID:   *body.ChainID,
		ChainData: *body.ChainData,
	}

	return v
}

// ValidateDelChainListRequestBody runs the validations defined on
// DelChainListRequestBody
func ValidateDelChainListRequestBody(body *DelChainListRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("_id", "body"))
	}
	if body.ChainID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("chainId", "body"))
	}
	return
}

// ValidateSetChainGasUsdRequestBody runs the validations defined on
// SetChainGasUsdRequestBody
func ValidateSetChainGasUsdRequestBody(body *SetChainGasUsdRequestBody) (err error) {
	if body.Usd == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("usd", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("_id", "body"))
	}
	if body.ChainID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("chainId", "body"))
	}
	return
}

// ValidateSetChainClientConfigRequestBody runs the validations defined on
// SetChainClientConfigRequestBody
func ValidateSetChainClientConfigRequestBody(body *SetChainClientConfigRequestBody) (err error) {
	if body.ChainID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("chainId", "body"))
	}
	if body.ChainData == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("chainData", "body"))
	}
	return
}
