// Code generated by goa v3.11.0, DO NOT EDIT.
//
// baseData HTTP client types
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	basedata "admin-panel/gen/base_data"
)

// ChainDataListResponseBody is the type of the "baseData" service
// "chainDataList" endpoint HTTP response body.
type ChainDataListResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// list
	Result  []*ChainDataItemResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string                      `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetLpInfoResponseBody is the type of the "baseData" service "getLpInfo"
// endpoint HTTP response body.
type GetLpInfoResponseBody struct {
	Code    *int64              `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Result  *LpInfoResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string             `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RunTimeEnvResponseBody is the type of the "baseData" service "runTimeEnv"
// endpoint HTTP response body.
type RunTimeEnvResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// list
	Result  *string `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ChainDataItemResponseBody is used to define fields on response body types.
type ChainDataItemResponseBody struct {
	// chain id in the database
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// chain Id
	ChainID *int64 `form:"chainId,omitempty" json:"chainId,omitempty" xml:"chainId,omitempty"`
	// chain name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// full chain name
	ChainName *string `form:"chainName,omitempty" json:"chainName,omitempty" xml:"chainName,omitempty"`
	// token name
	TokenName *string `form:"tokenName,omitempty" json:"tokenName,omitempty" xml:"tokenName,omitempty"`
}

// LpInfoResponseBody is used to define fields on response body types.
type LpInfoResponseBody struct {
	Name    *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Profile *string `form:"profile,omitempty" json:"profile,omitempty" xml:"profile,omitempty"`
}

// NewChainDataListResultOK builds a "baseData" service "chainDataList"
// endpoint result from a HTTP "OK" response.
func NewChainDataListResultOK(body *ChainDataListResponseBody) *basedata.ChainDataListResult {
	v := &basedata.ChainDataListResult{
		Code:    body.Code,
		Message: body.Message,
	}
	if body.Result != nil {
		v.Result = make([]*basedata.ChainDataItem, len(body.Result))
		for i, val := range body.Result {
			v.Result[i] = unmarshalChainDataItemResponseBodyToBasedataChainDataItem(val)
		}
	}

	return v
}

// NewGetLpInfoResultOK builds a "baseData" service "getLpInfo" endpoint result
// from a HTTP "OK" response.
func NewGetLpInfoResultOK(body *GetLpInfoResponseBody) *basedata.GetLpInfoResult {
	v := &basedata.GetLpInfoResult{
		Code:    body.Code,
		Message: body.Message,
	}
	if body.Result != nil {
		v.Result = unmarshalLpInfoResponseBodyToBasedataLpInfo(body.Result)
	}

	return v
}

// NewRunTimeEnvResultOK builds a "baseData" service "runTimeEnv" endpoint
// result from a HTTP "OK" response.
func NewRunTimeEnvResultOK(body *RunTimeEnvResponseBody) *basedata.RunTimeEnvResult {
	v := &basedata.RunTimeEnvResult{
		Code:    body.Code,
		Result:  body.Result,
		Message: body.Message,
	}

	return v
}
