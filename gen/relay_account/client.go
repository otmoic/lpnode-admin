// Code generated by goa v3.11.0, DO NOT EDIT.
//
// relayAccount client
//
// Command:
// $ goa gen admin-panel/design

package relayaccount

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "relayAccount" service client.
type Client struct {
	ListAccountEndpoint     goa.Endpoint
	RegisterAccountEndpoint goa.Endpoint
	DeleteAccountEndpoint   goa.Endpoint
}

// NewClient initializes a "relayAccount" service client given the endpoints.
func NewClient(listAccount, registerAccount, deleteAccount goa.Endpoint) *Client {
	return &Client{
		ListAccountEndpoint:     listAccount,
		RegisterAccountEndpoint: registerAccount,
		DeleteAccountEndpoint:   deleteAccount,
	}
}

// ListAccount calls the "listAccount" endpoint of the "relayAccount" service.
func (c *Client) ListAccount(ctx context.Context) (res *ListAccountResult, err error) {
	var ires interface{}
	ires, err = c.ListAccountEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*ListAccountResult), nil
}

// RegisterAccount calls the "registerAccount" endpoint of the "relayAccount"
// service.
func (c *Client) RegisterAccount(ctx context.Context, p *RegisterAccountPayload) (res *RegisterAccountResult, err error) {
	var ires interface{}
	ires, err = c.RegisterAccountEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*RegisterAccountResult), nil
}

// DeleteAccount calls the "deleteAccount" endpoint of the "relayAccount"
// service.
func (c *Client) DeleteAccount(ctx context.Context, p *DeleteAccountPayload) (res *DeleteAccountResult, err error) {
	var ires interface{}
	ires, err = c.DeleteAccountEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*DeleteAccountResult), nil
}
