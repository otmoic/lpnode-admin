// Code generated by goa v3.11.0, DO NOT EDIT.
//
// hedge client HTTP transport
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the hedge service endpoint HTTP clients.
type Client struct {
	// List Doer is the HTTP client used to make requests to the list endpoint.
	ListDoer goahttp.Doer

	// Edit Doer is the HTTP client used to make requests to the edit endpoint.
	EditDoer goahttp.Doer

	// Del Doer is the HTTP client used to make requests to the del endpoint.
	DelDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the hedge service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ListDoer:            doer,
		EditDoer:            doer,
		DelDoer:             doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// List returns an endpoint that makes HTTP requests to the hedge service list
// server.
func (c *Client) List() goa.Endpoint {
	var (
		decodeResponse = DecodeListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("hedge", "list", err)
		}
		return decodeResponse(resp)
	}
}

// Edit returns an endpoint that makes HTTP requests to the hedge service edit
// server.
func (c *Client) Edit() goa.Endpoint {
	var (
		encodeRequest  = EncodeEditRequest(c.encoder)
		decodeResponse = DecodeEditResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildEditRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.EditDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("hedge", "edit", err)
		}
		return decodeResponse(resp)
	}
}

// Del returns an endpoint that makes HTTP requests to the hedge service del
// server.
func (c *Client) Del() goa.Endpoint {
	var (
		encodeRequest  = EncodeDelRequest(c.encoder)
		decodeResponse = DecodeDelResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDelRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DelDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("hedge", "del", err)
		}
		return decodeResponse(resp)
	}
}
