// Code generated by goa v3.11.0, DO NOT EDIT.
//
// lpRegister HTTP client encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildRegisterAllRequest instantiates a HTTP request object with method and
// path set to call the "lpRegister" service "registerAll" endpoint
func (c *Client) BuildRegisterAllRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RegisterAllLpRegisterPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("lpRegister", "registerAll", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeRegisterAllResponse returns a decoder for responses returned by the
// lpRegister registerAll endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeRegisterAllResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RegisterAllResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("lpRegister", "registerAll", err)
			}
			res := NewRegisterAllResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("lpRegister", "registerAll", resp.StatusCode, string(body))
		}
	}
}

// BuildUnRegisterAllRequest instantiates a HTTP request object with method and
// path set to call the "lpRegister" service "unRegisterAll" endpoint
func (c *Client) BuildUnRegisterAllRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UnRegisterAllLpRegisterPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("lpRegister", "unRegisterAll", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeUnRegisterAllResponse returns a decoder for responses returned by the
// lpRegister unRegisterAll endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeUnRegisterAllResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UnRegisterAllResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("lpRegister", "unRegisterAll", err)
			}
			res := NewUnRegisterAllResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("lpRegister", "unRegisterAll", resp.StatusCode, string(body))
		}
	}
}
