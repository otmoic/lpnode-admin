// Code generated by goa v3.11.0, DO NOT EDIT.
//
// lpmonit client HTTP transport
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the lpmonit service endpoint HTTP clients.
type Client struct {
	// AddScript Doer is the HTTP client used to make requests to the add_script
	// endpoint.
	AddScriptDoer goahttp.Doer

	// ListScript Doer is the HTTP client used to make requests to the list_script
	// endpoint.
	ListScriptDoer goahttp.Doer

	// DeleteScript Doer is the HTTP client used to make requests to the
	// delete_script endpoint.
	DeleteScriptDoer goahttp.Doer

	// RunScript Doer is the HTTP client used to make requests to the run_script
	// endpoint.
	RunScriptDoer goahttp.Doer

	// RunResult Doer is the HTTP client used to make requests to the run_result
	// endpoint.
	RunResultDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the lpmonit service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		AddScriptDoer:       doer,
		ListScriptDoer:      doer,
		DeleteScriptDoer:    doer,
		RunScriptDoer:       doer,
		RunResultDoer:       doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// AddScript returns an endpoint that makes HTTP requests to the lpmonit
// service add_script server.
func (c *Client) AddScript() goa.Endpoint {
	var (
		encodeRequest  = EncodeAddScriptRequest(c.encoder)
		decodeResponse = DecodeAddScriptResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildAddScriptRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.AddScriptDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("lpmonit", "add_script", err)
		}
		return decodeResponse(resp)
	}
}

// ListScript returns an endpoint that makes HTTP requests to the lpmonit
// service list_script server.
func (c *Client) ListScript() goa.Endpoint {
	var (
		decodeResponse = DecodeListScriptResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListScriptRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListScriptDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("lpmonit", "list_script", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteScript returns an endpoint that makes HTTP requests to the lpmonit
// service delete_script server.
func (c *Client) DeleteScript() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteScriptRequest(c.encoder)
		decodeResponse = DecodeDeleteScriptResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteScriptRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteScriptDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("lpmonit", "delete_script", err)
		}
		return decodeResponse(resp)
	}
}

// RunScript returns an endpoint that makes HTTP requests to the lpmonit
// service run_script server.
func (c *Client) RunScript() goa.Endpoint {
	var (
		encodeRequest  = EncodeRunScriptRequest(c.encoder)
		decodeResponse = DecodeRunScriptResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRunScriptRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RunScriptDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("lpmonit", "run_script", err)
		}
		return decodeResponse(resp)
	}
}

// RunResult returns an endpoint that makes HTTP requests to the lpmonit
// service run_result server.
func (c *Client) RunResult() goa.Endpoint {
	var (
		encodeRequest  = EncodeRunResultRequest(c.encoder)
		decodeResponse = DecodeRunResultResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildRunResultRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.RunResultDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("lpmonit", "run_result", err)
		}
		return decodeResponse(resp)
	}
}
