// Code generated by goa v3.11.0, DO NOT EDIT.
//
// chainConfig client HTTP transport
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the chainConfig service endpoint HTTP clients.
type Client struct {
	// SetChainList Doer is the HTTP client used to make requests to the
	// setChainList endpoint.
	SetChainListDoer goahttp.Doer

	// DelChainList Doer is the HTTP client used to make requests to the
	// delChainList endpoint.
	DelChainListDoer goahttp.Doer

	// ChainList Doer is the HTTP client used to make requests to the chainList
	// endpoint.
	ChainListDoer goahttp.Doer

	// SetChainGasUsd Doer is the HTTP client used to make requests to the
	// setChainGasUsd endpoint.
	SetChainGasUsdDoer goahttp.Doer

	// SetChainClientConfig Doer is the HTTP client used to make requests to the
	// setChainClientConfig endpoint.
	SetChainClientConfigDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the chainConfig service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		SetChainListDoer:         doer,
		DelChainListDoer:         doer,
		ChainListDoer:            doer,
		SetChainGasUsdDoer:       doer,
		SetChainClientConfigDoer: doer,
		RestoreResponseBody:      restoreBody,
		scheme:                   scheme,
		host:                     host,
		decoder:                  dec,
		encoder:                  enc,
	}
}

// SetChainList returns an endpoint that makes HTTP requests to the chainConfig
// service setChainList server.
func (c *Client) SetChainList() goa.Endpoint {
	var (
		encodeRequest  = EncodeSetChainListRequest(c.encoder)
		decodeResponse = DecodeSetChainListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSetChainListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SetChainListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("chainConfig", "setChainList", err)
		}
		return decodeResponse(resp)
	}
}

// DelChainList returns an endpoint that makes HTTP requests to the chainConfig
// service delChainList server.
func (c *Client) DelChainList() goa.Endpoint {
	var (
		encodeRequest  = EncodeDelChainListRequest(c.encoder)
		decodeResponse = DecodeDelChainListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDelChainListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DelChainListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("chainConfig", "delChainList", err)
		}
		return decodeResponse(resp)
	}
}

// ChainList returns an endpoint that makes HTTP requests to the chainConfig
// service chainList server.
func (c *Client) ChainList() goa.Endpoint {
	var (
		decodeResponse = DecodeChainListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildChainListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ChainListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("chainConfig", "chainList", err)
		}
		return decodeResponse(resp)
	}
}

// SetChainGasUsd returns an endpoint that makes HTTP requests to the
// chainConfig service setChainGasUsd server.
func (c *Client) SetChainGasUsd() goa.Endpoint {
	var (
		encodeRequest  = EncodeSetChainGasUsdRequest(c.encoder)
		decodeResponse = DecodeSetChainGasUsdResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSetChainGasUsdRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SetChainGasUsdDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("chainConfig", "setChainGasUsd", err)
		}
		return decodeResponse(resp)
	}
}

// SetChainClientConfig returns an endpoint that makes HTTP requests to the
// chainConfig service setChainClientConfig server.
func (c *Client) SetChainClientConfig() goa.Endpoint {
	var (
		encodeRequest  = EncodeSetChainClientConfigRequest(c.encoder)
		decodeResponse = DecodeSetChainClientConfigResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildSetChainClientConfigRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.SetChainClientConfigDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("chainConfig", "setChainClientConfig", err)
		}
		return decodeResponse(resp)
	}
}
