// Code generated by goa v3.11.0, DO NOT EDIT.
//
// hedge HTTP client encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	hedge "admin-panel/gen/hedge"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "hedge" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListHedgePath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hedge", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListResponse returns a decoder for responses returned by the hedge
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hedge", "list", err)
			}
			res := NewListResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hedge", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildEditRequest instantiates a HTTP request object with method and path set
// to call the "hedge" service "edit" endpoint
func (c *Client) BuildEditRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: EditHedgePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hedge", "edit", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeEditRequest returns an encoder for requests sent to the hedge edit
// server.
func EncodeEditRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*hedge.EditPayload)
		if !ok {
			return goahttp.ErrInvalidType("hedge", "edit", "*hedge.EditPayload", v)
		}
		body := NewEditRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("hedge", "edit", err)
		}
		return nil
	}
}

// DecodeEditResponse returns a decoder for responses returned by the hedge
// edit endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeEditResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body EditResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hedge", "edit", err)
			}
			res := NewEditResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hedge", "edit", resp.StatusCode, string(body))
		}
	}
}

// BuildDelRequest instantiates a HTTP request object with method and path set
// to call the "hedge" service "del" endpoint
func (c *Client) BuildDelRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DelHedgePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("hedge", "del", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDelRequest returns an encoder for requests sent to the hedge del
// server.
func EncodeDelRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*hedge.DelPayload)
		if !ok {
			return goahttp.ErrInvalidType("hedge", "del", "*hedge.DelPayload", v)
		}
		body := NewDelRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("hedge", "del", err)
		}
		return nil
	}
}

// DecodeDelResponse returns a decoder for responses returned by the hedge del
// endpoint. restoreBody controls whether the response body should be restored
// after having been read.
func DecodeDelResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DelResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("hedge", "del", err)
			}
			res := NewDelResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("hedge", "del", resp.StatusCode, string(body))
		}
	}
}

// unmarshalHedgeItemResponseBodyToHedgeHedgeItem builds a value of type
// *hedge.HedgeItem from a value of type *HedgeItemResponseBody.
func unmarshalHedgeItemResponseBodyToHedgeHedgeItem(v *HedgeItemResponseBody) *hedge.HedgeItem {
	if v == nil {
		return nil
	}
	res := &hedge.HedgeItem{
		ID:        v.ID,
		HedgeType: v.HedgeType,
	}

	return res
}

// marshalHedgeHedgeItemToHedgeItemRequestBody builds a value of type
// *HedgeItemRequestBody from a value of type *hedge.HedgeItem.
func marshalHedgeHedgeItemToHedgeItemRequestBody(v *hedge.HedgeItem) *HedgeItemRequestBody {
	if v == nil {
		return nil
	}
	res := &HedgeItemRequestBody{
		ID:        v.ID,
		HedgeType: v.HedgeType,
	}

	return res
}

// marshalHedgeItemRequestBodyToHedgeHedgeItem builds a value of type
// *hedge.HedgeItem from a value of type *HedgeItemRequestBody.
func marshalHedgeItemRequestBodyToHedgeHedgeItem(v *HedgeItemRequestBody) *hedge.HedgeItem {
	if v == nil {
		return nil
	}
	res := &hedge.HedgeItem{
		ID:        v.ID,
		HedgeType: v.HedgeType,
	}

	return res
}
