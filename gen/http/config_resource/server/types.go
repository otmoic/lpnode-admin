// Code generated by goa v3.11.0, DO NOT EDIT.
//
// configResource HTTP server types
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	configresource "admin-panel/gen/config_resource"

	goa "goa.design/goa/v3/pkg"
)

// CreateResourceRequestBody is the type of the "configResource" service
// "createResource" endpoint HTTP request body.
type CreateResourceRequestBody struct {
	AppName  *string `form:"appName,omitempty" json:"appName,omitempty" xml:"appName,omitempty"`
	Version  *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	ClientID *string `form:"clientId,omitempty" json:"clientId,omitempty" xml:"clientId,omitempty"`
	Template *string `form:"template,omitempty" json:"template,omitempty" xml:"template,omitempty"`
}

// GetResourceRequestBody is the type of the "configResource" service
// "getResource" endpoint HTTP request body.
type GetResourceRequestBody struct {
	ClientID *string `form:"clientId,omitempty" json:"clientId,omitempty" xml:"clientId,omitempty"`
}

// EditResultRequestBody is the type of the "configResource" service
// "editResult" endpoint HTTP request body.
type EditResultRequestBody struct {
	TemplateResult *string `form:"templateResult,omitempty" json:"templateResult,omitempty" xml:"templateResult,omitempty"`
	Template       *string `form:"template,omitempty" json:"template,omitempty" xml:"template,omitempty"`
	ClientID       *string `form:"clientId,omitempty" json:"clientId,omitempty" xml:"clientId,omitempty"`
	AppName        *string `form:"appName,omitempty" json:"appName,omitempty" xml:"appName,omitempty"`
	Version        *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	VersionHash    *string `form:"versionHash,omitempty" json:"versionHash,omitempty" xml:"versionHash,omitempty"`
}

// CreateResourceResponseBody is the type of the "configResource" service
// "createResource" endpoint HTTP response body.
type CreateResourceResponseBody struct {
	// 0 is success
	Code    *int64                          `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Result  *ConfigResultIDItemResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string                         `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetResourceResponseBody is the type of the "configResource" service
// "getResource" endpoint HTTP response body.
type GetResourceResponseBody struct {
	// 0 is success
	Code    *int64                            `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Result  *ResourceConfigResultResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string                           `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ListResourceResponseBody is the type of the "configResource" service
// "listResource" endpoint HTTP response body.
type ListResourceResponseBody struct {
	Code    *int64                              `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Result  []*ResourceConfigResultResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string                             `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteResultResponseBody is the type of the "configResource" service
// "deleteResult" endpoint HTTP response body.
type DeleteResultResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
}

// EditResultResponseBody is the type of the "configResource" service
// "editResult" endpoint HTTP response body.
type EditResultResponseBody struct {
	Code    *int64  `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// update affected id
	Result *string `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
}

// ConfigResultIDItemResponseBody is used to define fields on response body
// types.
type ConfigResultIDItemResponseBody struct {
	// mongodb primary key
	ID string `form:"id" json:"id" xml:"id"`
	// clientId
	ClientID *string `form:"clientId,omitempty" json:"clientId,omitempty" xml:"clientId,omitempty"`
}

// ResourceConfigResultResponseBody is used to define fields on response body
// types.
type ResourceConfigResultResponseBody struct {
	ID             *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	TemplateResult *string `form:"templateResult,omitempty" json:"templateResult,omitempty" xml:"templateResult,omitempty"`
	Template       *string `form:"template,omitempty" json:"template,omitempty" xml:"template,omitempty"`
	ClientID       string  `form:"clientId" json:"clientId" xml:"clientId"`
	AppName        *string `form:"appName,omitempty" json:"appName,omitempty" xml:"appName,omitempty"`
	Version        *string `form:"version,omitempty" json:"version,omitempty" xml:"version,omitempty"`
	VersionHash    *string `form:"versionHash,omitempty" json:"versionHash,omitempty" xml:"versionHash,omitempty"`
}

// NewCreateResourceResponseBody builds the HTTP response body from the result
// of the "createResource" endpoint of the "configResource" service.
func NewCreateResourceResponseBody(res *configresource.CreateResourceResult) *CreateResourceResponseBody {
	body := &CreateResourceResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Result != nil {
		body.Result = marshalConfigresourceConfigResultIDItemToConfigResultIDItemResponseBody(res.Result)
	}
	return body
}

// NewGetResourceResponseBody builds the HTTP response body from the result of
// the "getResource" endpoint of the "configResource" service.
func NewGetResourceResponseBody(res *configresource.GetResourceResult) *GetResourceResponseBody {
	body := &GetResourceResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Result != nil {
		body.Result = marshalConfigresourceResourceConfigResultToResourceConfigResultResponseBody(res.Result)
	}
	return body
}

// NewListResourceResponseBody builds the HTTP response body from the result of
// the "listResource" endpoint of the "configResource" service.
func NewListResourceResponseBody(res *configresource.ListResourceResult) *ListResourceResponseBody {
	body := &ListResourceResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Result != nil {
		body.Result = make([]*ResourceConfigResultResponseBody, len(res.Result))
		for i, val := range res.Result {
			body.Result[i] = marshalConfigresourceResourceConfigResultToResourceConfigResultResponseBody(val)
		}
	}
	return body
}

// NewDeleteResultResponseBody builds the HTTP response body from the result of
// the "deleteResult" endpoint of the "configResource" service.
func NewDeleteResultResponseBody(res *configresource.DeleteResultResult) *DeleteResultResponseBody {
	body := &DeleteResultResponseBody{
		Code: res.Code,
	}
	return body
}

// NewEditResultResponseBody builds the HTTP response body from the result of
// the "editResult" endpoint of the "configResource" service.
func NewEditResultResponseBody(res *configresource.EditResultResult) *EditResultResponseBody {
	body := &EditResultResponseBody{
		Code:    res.Code,
		Message: res.Message,
		Result:  res.Result,
	}
	return body
}

// NewCreateResourcePayload builds a configResource service createResource
// endpoint payload.
func NewCreateResourcePayload(body *CreateResourceRequestBody) *configresource.CreateResourcePayload {
	v := &configresource.CreateResourcePayload{
		AppName:  *body.AppName,
		Version:  body.Version,
		ClientID: *body.ClientID,
		Template: body.Template,
	}

	return v
}

// NewGetResourcePayload builds a configResource service getResource endpoint
// payload.
func NewGetResourcePayload(body *GetResourceRequestBody) *configresource.GetResourcePayload {
	v := &configresource.GetResourcePayload{
		ClientID: *body.ClientID,
	}

	return v
}

// NewEditResultPayload builds a configResource service editResult endpoint
// payload.
func NewEditResultPayload(body *EditResultRequestBody) *configresource.EditResultPayload {
	v := &configresource.EditResultPayload{
		TemplateResult: *body.TemplateResult,
		Template:       body.Template,
		ClientID:       *body.ClientID,
		AppName:        body.AppName,
		Version:        body.Version,
		VersionHash:    body.VersionHash,
	}

	return v
}

// ValidateCreateResourceRequestBody runs the validations defined on
// CreateResourceRequestBody
func ValidateCreateResourceRequestBody(body *CreateResourceRequestBody) (err error) {
	if body.AppName == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("appName", "body"))
	}
	if body.ClientID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("clientId", "body"))
	}
	return
}

// ValidateGetResourceRequestBody runs the validations defined on
// GetResourceRequestBody
func ValidateGetResourceRequestBody(body *GetResourceRequestBody) (err error) {
	if body.ClientID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("clientId", "body"))
	}
	return
}

// ValidateEditResultRequestBody runs the validations defined on
// EditResultRequestBody
func ValidateEditResultRequestBody(body *EditResultRequestBody) (err error) {
	if body.ClientID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("clientId", "body"))
	}
	if body.TemplateResult == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("templateResult", "body"))
	}
	return
}
