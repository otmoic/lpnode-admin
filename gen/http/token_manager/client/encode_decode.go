// Code generated by goa v3.11.0, DO NOT EDIT.
//
// tokenManager HTTP client encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	tokenmanager "admin-panel/gen/token_manager"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildTokenListRequest instantiates a HTTP request object with method and
// path set to call the "tokenManager" service "tokenList" endpoint
func (c *Client) BuildTokenListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TokenListTokenManagerPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tokenManager", "tokenList", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeTokenListResponse returns a decoder for responses returned by the
// tokenManager tokenList endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeTokenListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body TokenListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tokenManager", "tokenList", err)
			}
			err = ValidateTokenListResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("tokenManager", "tokenList", err)
			}
			res := NewTokenListResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tokenManager", "tokenList", resp.StatusCode, string(body))
		}
	}
}

// BuildTokenCreateRequest instantiates a HTTP request object with method and
// path set to call the "tokenManager" service "tokenCreate" endpoint
func (c *Client) BuildTokenCreateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TokenCreateTokenManagerPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tokenManager", "tokenCreate", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeTokenCreateRequest returns an encoder for requests sent to the
// tokenManager tokenCreate server.
func EncodeTokenCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tokenmanager.TokenItem)
		if !ok {
			return goahttp.ErrInvalidType("tokenManager", "tokenCreate", "*tokenmanager.TokenItem", v)
		}
		body := NewTokenCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("tokenManager", "tokenCreate", err)
		}
		return nil
	}
}

// DecodeTokenCreateResponse returns a decoder for responses returned by the
// tokenManager tokenCreate endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeTokenCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body TokenCreateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tokenManager", "tokenCreate", err)
			}
			res := NewTokenCreateResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tokenManager", "tokenCreate", resp.StatusCode, string(body))
		}
	}
}

// BuildTokenDeleteRequest instantiates a HTTP request object with method and
// path set to call the "tokenManager" service "tokenDelete" endpoint
func (c *Client) BuildTokenDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TokenDeleteTokenManagerPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("tokenManager", "tokenDelete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeTokenDeleteRequest returns an encoder for requests sent to the
// tokenManager tokenDelete server.
func EncodeTokenDeleteRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*tokenmanager.DeleteTokenFilter)
		if !ok {
			return goahttp.ErrInvalidType("tokenManager", "tokenDelete", "*tokenmanager.DeleteTokenFilter", v)
		}
		body := NewTokenDeleteRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("tokenManager", "tokenDelete", err)
		}
		return nil
	}
}

// DecodeTokenDeleteResponse returns a decoder for responses returned by the
// tokenManager tokenDelete endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeTokenDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body TokenDeleteResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("tokenManager", "tokenDelete", err)
			}
			res := NewTokenDeleteResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("tokenManager", "tokenDelete", resp.StatusCode, string(body))
		}
	}
}

// unmarshalTokenItemResponseBodyToTokenmanagerTokenItem builds a value of type
// *tokenmanager.TokenItem from a value of type *TokenItemResponseBody.
func unmarshalTokenItemResponseBodyToTokenmanagerTokenItem(v *TokenItemResponseBody) *tokenmanager.TokenItem {
	if v == nil {
		return nil
	}
	res := &tokenmanager.TokenItem{
		ID:         v.ID,
		TokenID:    v.TokenID,
		ChainID:    *v.ChainID,
		Address:    *v.Address,
		TokenName:  v.TokenName,
		MarketName: *v.MarketName,
		Precision:  *v.Precision,
		ChainType:  v.ChainType,
		CoinType:   *v.CoinType,
	}

	return res
}
