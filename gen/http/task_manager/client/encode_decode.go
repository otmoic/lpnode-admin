// Code generated by goa v3.11.0, DO NOT EDIT.
//
// taskManager HTTP client encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	taskmanager "admin-panel/gen/task_manager"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildTaskListRequest instantiates a HTTP request object with method and path
// set to call the "taskManager" service "taskList" endpoint
func (c *Client) BuildTaskListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TaskListTaskManagerPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("taskManager", "taskList", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeTaskListResponse returns a decoder for responses returned by the
// taskManager taskList endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeTaskListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body TaskListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("taskManager", "taskList", err)
			}
			err = ValidateTaskListResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("taskManager", "taskList", err)
			}
			res := NewTaskListResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("taskManager", "taskList", resp.StatusCode, string(body))
		}
	}
}

// BuildTaskDeployRequest instantiates a HTTP request object with method and
// path set to call the "taskManager" service "taskDeploy" endpoint
func (c *Client) BuildTaskDeployRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TaskDeployTaskManagerPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("taskManager", "taskDeploy", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeTaskDeployRequest returns an encoder for requests sent to the
// taskManager taskDeploy server.
func EncodeTaskDeployRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*taskmanager.TaskDeploy2)
		if !ok {
			return goahttp.ErrInvalidType("taskManager", "taskDeploy", "*taskmanager.TaskDeploy2", v)
		}
		body := NewTaskDeployRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("taskManager", "taskDeploy", err)
		}
		return nil
	}
}

// DecodeTaskDeployResponse returns a decoder for responses returned by the
// taskManager taskDeploy endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeTaskDeployResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body TaskDeployResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("taskManager", "taskDeploy", err)
			}
			res := NewTaskDeployResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("taskManager", "taskDeploy", resp.StatusCode, string(body))
		}
	}
}

// BuildUnDeployRequest instantiates a HTTP request object with method and path
// set to call the "taskManager" service "unDeploy" endpoint
func (c *Client) BuildUnDeployRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UnDeployTaskManagerPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("taskManager", "unDeploy", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUnDeployRequest returns an encoder for requests sent to the
// taskManager unDeploy server.
func EncodeUnDeployRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*taskmanager.TaskDeploy2)
		if !ok {
			return goahttp.ErrInvalidType("taskManager", "unDeploy", "*taskmanager.TaskDeploy2", v)
		}
		body := NewUnDeployRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("taskManager", "unDeploy", err)
		}
		return nil
	}
}

// DecodeUnDeployResponse returns a decoder for responses returned by the
// taskManager unDeploy endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeUnDeployResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UnDeployResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("taskManager", "unDeploy", err)
			}
			res := NewUnDeployResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("taskManager", "unDeploy", resp.StatusCode, string(body))
		}
	}
}

// BuildTaskCreateRequest instantiates a HTTP request object with method and
// path set to call the "taskManager" service "taskCreate" endpoint
func (c *Client) BuildTaskCreateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: TaskCreateTaskManagerPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("taskManager", "taskCreate", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeTaskCreateRequest returns an encoder for requests sent to the
// taskManager taskCreate server.
func EncodeTaskCreateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*taskmanager.TaskItem)
		if !ok {
			return goahttp.ErrInvalidType("taskManager", "taskCreate", "*taskmanager.TaskItem", v)
		}
		body := NewTaskCreateRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("taskManager", "taskCreate", err)
		}
		return nil
	}
}

// DecodeTaskCreateResponse returns a decoder for responses returned by the
// taskManager taskCreate endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeTaskCreateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body TaskCreateResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("taskManager", "taskCreate", err)
			}
			res := NewTaskCreateResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("taskManager", "taskCreate", resp.StatusCode, string(body))
		}
	}
}

// unmarshalTaskItemResponseBodyToTaskmanagerTaskItem builds a value of type
// *taskmanager.TaskItem from a value of type *TaskItemResponseBody.
func unmarshalTaskItemResponseBodyToTaskmanagerTaskItem(v *TaskItemResponseBody) *taskmanager.TaskItem {
	if v == nil {
		return nil
	}
	res := &taskmanager.TaskItem{
		ID:            v.ID,
		Schedule:      v.Schedule,
		TaskType:      v.TaskType,
		Deployed:      v.Deployed,
		DeployMessage: v.DeployMessage,
		ScriptPath:    v.ScriptPath,
		ScriptBody:    v.ScriptBody,
	}

	return res
}
