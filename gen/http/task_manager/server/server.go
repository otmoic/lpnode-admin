// Code generated by goa v3.11.0, DO NOT EDIT.
//
// taskManager HTTP server
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	taskmanager "admin-panel/gen/task_manager"
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the taskManager service endpoint HTTP handlers.
type Server struct {
	Mounts     []*MountPoint
	TaskList   http.Handler
	TaskDeploy http.Handler
	UnDeploy   http.Handler
	TaskCreate http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the taskManager service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *taskmanager.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"TaskList", "POST", "/lpnode/lpnode_admin_panel/taskManager/list"},
			{"TaskDeploy", "POST", "/lpnode/lpnode_admin_panel/taskManager/deploy"},
			{"UnDeploy", "POST", "/lpnode/lpnode_admin_panel/taskManager/undeploy"},
			{"TaskCreate", "POST", "/lpnode/lpnode_admin_panel/taskManager/create"},
		},
		TaskList:   NewTaskListHandler(e.TaskList, mux, decoder, encoder, errhandler, formatter),
		TaskDeploy: NewTaskDeployHandler(e.TaskDeploy, mux, decoder, encoder, errhandler, formatter),
		UnDeploy:   NewUnDeployHandler(e.UnDeploy, mux, decoder, encoder, errhandler, formatter),
		TaskCreate: NewTaskCreateHandler(e.TaskCreate, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "taskManager" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.TaskList = m(s.TaskList)
	s.TaskDeploy = m(s.TaskDeploy)
	s.UnDeploy = m(s.UnDeploy)
	s.TaskCreate = m(s.TaskCreate)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return taskmanager.MethodNames[:] }

// Mount configures the mux to serve the taskManager endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountTaskListHandler(mux, h.TaskList)
	MountTaskDeployHandler(mux, h.TaskDeploy)
	MountUnDeployHandler(mux, h.UnDeploy)
	MountTaskCreateHandler(mux, h.TaskCreate)
}

// Mount configures the mux to serve the taskManager endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountTaskListHandler configures the mux to serve the "taskManager" service
// "taskList" endpoint.
func MountTaskListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/taskManager/list", f)
}

// NewTaskListHandler creates a HTTP handler which loads the HTTP request and
// calls the "taskManager" service "taskList" endpoint.
func NewTaskListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeTaskListResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "taskList")
		ctx = context.WithValue(ctx, goa.ServiceKey, "taskManager")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountTaskDeployHandler configures the mux to serve the "taskManager" service
// "taskDeploy" endpoint.
func MountTaskDeployHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/taskManager/deploy", f)
}

// NewTaskDeployHandler creates a HTTP handler which loads the HTTP request and
// calls the "taskManager" service "taskDeploy" endpoint.
func NewTaskDeployHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeTaskDeployRequest(mux, decoder)
		encodeResponse = EncodeTaskDeployResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "taskDeploy")
		ctx = context.WithValue(ctx, goa.ServiceKey, "taskManager")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUnDeployHandler configures the mux to serve the "taskManager" service
// "unDeploy" endpoint.
func MountUnDeployHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/taskManager/undeploy", f)
}

// NewUnDeployHandler creates a HTTP handler which loads the HTTP request and
// calls the "taskManager" service "unDeploy" endpoint.
func NewUnDeployHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUnDeployRequest(mux, decoder)
		encodeResponse = EncodeUnDeployResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "unDeploy")
		ctx = context.WithValue(ctx, goa.ServiceKey, "taskManager")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountTaskCreateHandler configures the mux to serve the "taskManager" service
// "taskCreate" endpoint.
func MountTaskCreateHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/taskManager/create", f)
}

// NewTaskCreateHandler creates a HTTP handler which loads the HTTP request and
// calls the "taskManager" service "taskCreate" endpoint.
func NewTaskCreateHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeTaskCreateRequest(mux, decoder)
		encodeResponse = EncodeTaskCreateResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "taskCreate")
		ctx = context.WithValue(ctx, goa.ServiceKey, "taskManager")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
