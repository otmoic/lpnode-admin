// Code generated by goa v3.11.0, DO NOT EDIT.
//
// bridgeConfig client HTTP transport
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the bridgeConfig service endpoint HTTP clients.
type Client struct {
	// BridgeCreate Doer is the HTTP client used to make requests to the
	// bridgeCreate endpoint.
	BridgeCreateDoer goahttp.Doer

	// BridgeList Doer is the HTTP client used to make requests to the bridgeList
	// endpoint.
	BridgeListDoer goahttp.Doer

	// BridgeDelete Doer is the HTTP client used to make requests to the
	// bridgeDelete endpoint.
	BridgeDeleteDoer goahttp.Doer

	// BridgeTest Doer is the HTTP client used to make requests to the bridgeTest
	// endpoint.
	BridgeTestDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the bridgeConfig service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		BridgeCreateDoer:    doer,
		BridgeListDoer:      doer,
		BridgeDeleteDoer:    doer,
		BridgeTestDoer:      doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// BridgeCreate returns an endpoint that makes HTTP requests to the
// bridgeConfig service bridgeCreate server.
func (c *Client) BridgeCreate() goa.Endpoint {
	var (
		encodeRequest  = EncodeBridgeCreateRequest(c.encoder)
		decodeResponse = DecodeBridgeCreateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildBridgeCreateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.BridgeCreateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("bridgeConfig", "bridgeCreate", err)
		}
		return decodeResponse(resp)
	}
}

// BridgeList returns an endpoint that makes HTTP requests to the bridgeConfig
// service bridgeList server.
func (c *Client) BridgeList() goa.Endpoint {
	var (
		decodeResponse = DecodeBridgeListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildBridgeListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.BridgeListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("bridgeConfig", "bridgeList", err)
		}
		return decodeResponse(resp)
	}
}

// BridgeDelete returns an endpoint that makes HTTP requests to the
// bridgeConfig service bridgeDelete server.
func (c *Client) BridgeDelete() goa.Endpoint {
	var (
		encodeRequest  = EncodeBridgeDeleteRequest(c.encoder)
		decodeResponse = DecodeBridgeDeleteResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildBridgeDeleteRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.BridgeDeleteDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("bridgeConfig", "bridgeDelete", err)
		}
		return decodeResponse(resp)
	}
}

// BridgeTest returns an endpoint that makes HTTP requests to the bridgeConfig
// service bridgeTest server.
func (c *Client) BridgeTest() goa.Endpoint {
	var (
		encodeRequest  = EncodeBridgeTestRequest(c.encoder)
		decodeResponse = DecodeBridgeTestResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildBridgeTestRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.BridgeTestDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("bridgeConfig", "bridgeTest", err)
		}
		return decodeResponse(resp)
	}
}
