// Code generated by goa v3.11.0, DO NOT EDIT.
//
// authenticationLimiter client
//
// Command:
// $ goa gen admin-panel/design

package authenticationlimiter

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "authenticationLimiter" service client.
type Client struct {
	GetAuthenticationLimiterEndpoint goa.Endpoint
	SetAuthenticationLimiterEndpoint goa.Endpoint
	DelAuthenticationLimiterEndpoint goa.Endpoint
}

// NewClient initializes a "authenticationLimiter" service client given the
// endpoints.
func NewClient(getAuthenticationLimiter, setAuthenticationLimiter, delAuthenticationLimiter goa.Endpoint) *Client {
	return &Client{
		GetAuthenticationLimiterEndpoint: getAuthenticationLimiter,
		SetAuthenticationLimiterEndpoint: setAuthenticationLimiter,
		DelAuthenticationLimiterEndpoint: delAuthenticationLimiter,
	}
}

// GetAuthenticationLimiter calls the "getAuthenticationLimiter" endpoint of
// the "authenticationLimiter" service.
func (c *Client) GetAuthenticationLimiter(ctx context.Context) (res *GetAuthenticationLimiterResult, err error) {
	var ires interface{}
	ires, err = c.GetAuthenticationLimiterEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*GetAuthenticationLimiterResult), nil
}

// SetAuthenticationLimiter calls the "setAuthenticationLimiter" endpoint of
// the "authenticationLimiter" service.
func (c *Client) SetAuthenticationLimiter(ctx context.Context, p *SetAuthenticationLimiterPayload) (res *SetAuthenticationLimiterResult, err error) {
	var ires interface{}
	ires, err = c.SetAuthenticationLimiterEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SetAuthenticationLimiterResult), nil
}

// DelAuthenticationLimiter calls the "delAuthenticationLimiter" endpoint of
// the "authenticationLimiter" service.
func (c *Client) DelAuthenticationLimiter(ctx context.Context) (res *DelAuthenticationLimiterResult, err error) {
	var ires interface{}
	ires, err = c.DelAuthenticationLimiterEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*DelAuthenticationLimiterResult), nil
}
