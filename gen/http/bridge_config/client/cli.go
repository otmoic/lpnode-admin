// Code generated by goa v3.11.0, DO NOT EDIT.
//
// bridgeConfig HTTP client CLI support package
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	bridgeconfig "admin-panel/gen/bridge_config"
	"encoding/json"
	"fmt"
)

// BuildBridgeCreatePayload builds the payload for the bridgeConfig
// bridgeCreate endpoint from CLI flags.
func BuildBridgeCreatePayload(bridgeConfigBridgeCreateBody string) (*bridgeconfig.BridgeItem, error) {
	var err error
	var body BridgeCreateRequestBody
	{
		err = json.Unmarshal([]byte(bridgeConfigBridgeCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"ammName\": \"Et pariatur omnis eligendi et nemo.\",\n      \"bridgeName\": \"Eos quia voluptatem quo ducimus repellat quia.\",\n      \"dstChainId\": \"Rerum labore et nihil soluta aut repudiandae.\",\n      \"dstTokenId\": \"Suscipit quo a non officia velit.\",\n      \"enableHedge\": false,\n      \"srcChainId\": \"Delectus officia porro aut.\",\n      \"srcTokenId\": \"Culpa beatae praesentium architecto.\",\n      \"srcWalletId\": \"Voluptas temporibus et blanditiis.\",\n      \"walletId\": \"Perspiciatis quis ad fugit.\"\n   }'")
		}
	}
	v := &bridgeconfig.BridgeItem{
		BridgeName:  body.BridgeName,
		SrcChainID:  body.SrcChainID,
		DstChainID:  body.DstChainID,
		SrcTokenID:  body.SrcTokenID,
		DstTokenID:  body.DstTokenID,
		WalletID:    body.WalletID,
		SrcWalletID: body.SrcWalletID,
		AmmName:     body.AmmName,
		EnableHedge: body.EnableHedge,
	}
	{
		var zero bool
		if v.EnableHedge == zero {
			v.EnableHedge = true
		}
	}

	return v, nil
}

// BuildBridgeDeletePayload builds the payload for the bridgeConfig
// bridgeDelete endpoint from CLI flags.
func BuildBridgeDeletePayload(bridgeConfigBridgeDeleteBody string) (*bridgeconfig.DeleteBridgeFilter, error) {
	var err error
	var body BridgeDeleteRequestBody
	{
		err = json.Unmarshal([]byte(bridgeConfigBridgeDeleteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Repellat repellat natus ut rem eos.\"\n   }'")
		}
	}
	v := &bridgeconfig.DeleteBridgeFilter{
		ID: body.ID,
	}

	return v, nil
}

// BuildBridgeTestPayload builds the payload for the bridgeConfig bridgeTest
// endpoint from CLI flags.
func BuildBridgeTestPayload(bridgeConfigBridgeTestBody string) (*bridgeconfig.BridgeTestPayload, error) {
	var err error
	var body BridgeTestRequestBody
	{
		err = json.Unmarshal([]byte(bridgeConfigBridgeTestBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Aut a minus dicta sunt laudantium.\"\n   }'")
		}
	}
	v := &bridgeconfig.BridgeTestPayload{
		ID: body.ID,
	}

	return v, nil
}
