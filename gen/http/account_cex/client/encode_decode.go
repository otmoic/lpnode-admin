// Code generated by goa v3.11.0, DO NOT EDIT.
//
// accountCex HTTP client encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	accountcex "admin-panel/gen/account_cex"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildWalletInfoRequest instantiates a HTTP request object with method and
// path set to call the "accountCex" service "walletInfo" endpoint
func (c *Client) BuildWalletInfoRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: WalletInfoAccountCexPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("accountCex", "walletInfo", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeWalletInfoResponse returns a decoder for responses returned by the
// accountCex walletInfo endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeWalletInfoResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body WalletInfoResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("accountCex", "walletInfo", err)
			}
			res := NewWalletInfoResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("accountCex", "walletInfo", resp.StatusCode, string(body))
		}
	}
}

// unmarshalCexAccountBalanceResponseBodyToAccountcexCexAccountBalance builds a
// value of type *accountcex.CexAccountBalance from a value of type
// *CexAccountBalanceResponseBody.
func unmarshalCexAccountBalanceResponseBodyToAccountcexCexAccountBalance(v *CexAccountBalanceResponseBody) *accountcex.CexAccountBalance {
	if v == nil {
		return nil
	}
	res := &accountcex.CexAccountBalance{
		Asset:  v.Asset,
		Total:  v.Total,
		Free:   v.Free,
		Locked: v.Locked,
		Price:  v.Price,
	}

	return res
}
