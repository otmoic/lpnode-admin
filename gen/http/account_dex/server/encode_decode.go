// Code generated by goa v3.11.0, DO NOT EDIT.
//
// accountDex HTTP server encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	accountdex "admin-panel/gen/account_dex"
	"context"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeWalletInfoResponse returns an encoder for responses returned by the
// accountDex walletInfo endpoint.
func EncodeWalletInfoResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*accountdex.WalletInfoResult)
		enc := encoder(ctx, w)
		body := NewWalletInfoResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeWalletInfoRequest returns a decoder for requests sent to the
// accountDex walletInfo endpoint.
func DecodeWalletInfoRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body WalletInfoRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewWalletInfoPayload(&body)

		return payload, nil
	}
}

// marshalAccountdexDexAccountBalanceToDexAccountBalanceResponseBody builds a
// value of type *DexAccountBalanceResponseBody from a value of type
// *accountdex.DexAccountBalance.
func marshalAccountdexDexAccountBalanceToDexAccountBalanceResponseBody(v *accountdex.DexAccountBalance) *DexAccountBalanceResponseBody {
	if v == nil {
		return nil
	}
	res := &DexAccountBalanceResponseBody{
		Token:     v.Token,
		TokenName: v.TokenName,
		Amount:    v.Amount,
		Free:      v.Free,
		Locked:    v.Locked,
		Price:     v.Price,
	}

	return res
}
