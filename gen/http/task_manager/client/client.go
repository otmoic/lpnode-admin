// Code generated by goa v3.11.0, DO NOT EDIT.
//
// taskManager client HTTP transport
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the taskManager service endpoint HTTP clients.
type Client struct {
	// TaskList Doer is the HTTP client used to make requests to the taskList
	// endpoint.
	TaskListDoer goahttp.Doer

	// TaskDeploy Doer is the HTTP client used to make requests to the taskDeploy
	// endpoint.
	TaskDeployDoer goahttp.Doer

	// UnDeploy Doer is the HTTP client used to make requests to the unDeploy
	// endpoint.
	UnDeployDoer goahttp.Doer

	// TaskCreate Doer is the HTTP client used to make requests to the taskCreate
	// endpoint.
	TaskCreateDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the taskManager service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		TaskListDoer:        doer,
		TaskDeployDoer:      doer,
		UnDeployDoer:        doer,
		TaskCreateDoer:      doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// TaskList returns an endpoint that makes HTTP requests to the taskManager
// service taskList server.
func (c *Client) TaskList() goa.Endpoint {
	var (
		decodeResponse = DecodeTaskListResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildTaskListRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.TaskListDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("taskManager", "taskList", err)
		}
		return decodeResponse(resp)
	}
}

// TaskDeploy returns an endpoint that makes HTTP requests to the taskManager
// service taskDeploy server.
func (c *Client) TaskDeploy() goa.Endpoint {
	var (
		encodeRequest  = EncodeTaskDeployRequest(c.encoder)
		decodeResponse = DecodeTaskDeployResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildTaskDeployRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.TaskDeployDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("taskManager", "taskDeploy", err)
		}
		return decodeResponse(resp)
	}
}

// UnDeploy returns an endpoint that makes HTTP requests to the taskManager
// service unDeploy server.
func (c *Client) UnDeploy() goa.Endpoint {
	var (
		encodeRequest  = EncodeUnDeployRequest(c.encoder)
		decodeResponse = DecodeUnDeployResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildUnDeployRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.UnDeployDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("taskManager", "unDeploy", err)
		}
		return decodeResponse(resp)
	}
}

// TaskCreate returns an endpoint that makes HTTP requests to the taskManager
// service taskCreate server.
func (c *Client) TaskCreate() goa.Endpoint {
	var (
		encodeRequest  = EncodeTaskCreateRequest(c.encoder)
		decodeResponse = DecodeTaskCreateResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildTaskCreateRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.TaskCreateDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("taskManager", "taskCreate", err)
		}
		return decodeResponse(resp)
	}
}
