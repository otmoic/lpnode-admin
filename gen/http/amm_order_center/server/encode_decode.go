// Code generated by goa v3.11.0, DO NOT EDIT.
//
// ammOrderCenter HTTP server encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	ammordercenter "admin-panel/gen/amm_order_center"
	"context"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListResponse returns an encoder for responses returned by the
// ammOrderCenter list endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*ammordercenter.ListResult)
		enc := encoder(ctx, w)
		body := NewListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListRequest returns a decoder for requests sent to the ammOrderCenter
// list endpoint.
func DecodeListRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ListRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateListRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewListPayload(&body)

		return payload, nil
	}
}

// marshalAmmordercenterAmmOrderCenterRetResultToAmmOrderCenterRetResultResponseBody
// builds a value of type *AmmOrderCenterRetResultResponseBody from a value of
// type *ammordercenter.AmmOrderCenterRetResult.
func marshalAmmordercenterAmmOrderCenterRetResultToAmmOrderCenterRetResultResponseBody(v *ammordercenter.AmmOrderCenterRetResult) *AmmOrderCenterRetResultResponseBody {
	if v == nil {
		return nil
	}
	res := &AmmOrderCenterRetResultResponseBody{
		PageCount: v.PageCount,
	}
	if v.List != nil {
		res.List = make([]interface{}, len(v.List))
		for i, val := range v.List {
			res.List[i] = interface{}(val)
		}
	}

	return res
}
