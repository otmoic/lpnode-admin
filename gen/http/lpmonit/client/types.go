// Code generated by goa v3.11.0, DO NOT EDIT.
//
// lpmonit HTTP client types
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	lpmonit "admin-panel/gen/lpmonit"

	goa "goa.design/goa/v3/pkg"
)

// AddScriptRequestBody is the type of the "lpmonit" service "add_script"
// endpoint HTTP request body.
type AddScriptRequestBody struct {
	Name       *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Cron       *string `form:"cron,omitempty" json:"cron,omitempty" xml:"cron,omitempty"`
	ScriptBody *string `form:"scriptBody,omitempty" json:"scriptBody,omitempty" xml:"scriptBody,omitempty"`
}

// DeleteScriptRequestBody is the type of the "lpmonit" service "delete_script"
// endpoint HTTP request body.
type DeleteScriptRequestBody struct {
	// Mongodb 的主键
	ID string `form:"_id" json:"_id" xml:"_id"`
}

// RunScriptRequestBody is the type of the "lpmonit" service "run_script"
// endpoint HTTP request body.
type RunScriptRequestBody struct {
	ScriptContent *string `form:"scriptContent,omitempty" json:"scriptContent,omitempty" xml:"scriptContent,omitempty"`
}

// RunResultRequestBody is the type of the "lpmonit" service "run_result"
// endpoint HTTP request body.
type RunResultRequestBody struct {
	ScriptName *string `form:"scriptName,omitempty" json:"scriptName,omitempty" xml:"scriptName,omitempty"`
}

// AddScriptResponseBody is the type of the "lpmonit" service "add_script"
// endpoint HTTP response body.
type AddScriptResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 创建后的Id
	TaskID *string `form:"task_id,omitempty" json:"task_id,omitempty" xml:"task_id,omitempty"`
	// 创建成功后的Id
	Result  *string `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ListScriptResponseBody is the type of the "lpmonit" service "list_script"
// endpoint HTTP response body.
type ListScriptResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 任务列表
	Result  []*LpMointTaskItemResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string                        `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteScriptResponseBody is the type of the "lpmonit" service
// "delete_script" endpoint HTTP response body.
type DeleteScriptResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 是否删除成功
	Result  *int64  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RunScriptResponseBody is the type of the "lpmonit" service "run_script"
// endpoint HTTP response body.
type RunScriptResponseBody struct {
	Code    *int64  `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Result  *string `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RunResultResponseBody is the type of the "lpmonit" service "run_result"
// endpoint HTTP response body.
type RunResultResponseBody struct {
	Code    *int64  `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Result  *string `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// LpMointTaskItemResponseBody is used to define fields on response body types.
type LpMointTaskItemResponseBody struct {
	ID   *string `form:"_id,omitempty" json:"_id,omitempty" xml:"_id,omitempty"`
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 定时任务
	Cron *string `form:"cron,omitempty" json:"cron,omitempty" xml:"cron,omitempty"`
	// 创建时间戳
	CreatedAt *int64 `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// 脚本路径
	ScriptPath *string `form:"scriptPath,omitempty" json:"scriptPath,omitempty" xml:"scriptPath,omitempty"`
	// 任务类型
	TaskType *string `form:"taskType,omitempty" json:"taskType,omitempty" xml:"taskType,omitempty"`
}

// NewAddScriptRequestBody builds the HTTP request body from the payload of the
// "add_script" endpoint of the "lpmonit" service.
func NewAddScriptRequestBody(p *lpmonit.AddScriptPayload) *AddScriptRequestBody {
	body := &AddScriptRequestBody{
		Name:       p.Name,
		Cron:       p.Cron,
		ScriptBody: p.ScriptBody,
	}
	return body
}

// NewDeleteScriptRequestBody builds the HTTP request body from the payload of
// the "delete_script" endpoint of the "lpmonit" service.
func NewDeleteScriptRequestBody(p *lpmonit.DeleteScriptPayload) *DeleteScriptRequestBody {
	body := &DeleteScriptRequestBody{
		ID: p.ID,
	}
	return body
}

// NewRunScriptRequestBody builds the HTTP request body from the payload of the
// "run_script" endpoint of the "lpmonit" service.
func NewRunScriptRequestBody(p *lpmonit.RunScriptPayload) *RunScriptRequestBody {
	body := &RunScriptRequestBody{
		ScriptContent: p.ScriptContent,
	}
	return body
}

// NewRunResultRequestBody builds the HTTP request body from the payload of the
// "run_result" endpoint of the "lpmonit" service.
func NewRunResultRequestBody(p *lpmonit.RunResultPayload) *RunResultRequestBody {
	body := &RunResultRequestBody{
		ScriptName: p.ScriptName,
	}
	return body
}

// NewAddScriptResultOK builds a "lpmonit" service "add_script" endpoint result
// from a HTTP "OK" response.
func NewAddScriptResultOK(body *AddScriptResponseBody) *lpmonit.AddScriptResult {
	v := &lpmonit.AddScriptResult{
		Code:    body.Code,
		TaskID:  body.TaskID,
		Result:  body.Result,
		Message: body.Message,
	}

	return v
}

// NewListScriptResultOK builds a "lpmonit" service "list_script" endpoint
// result from a HTTP "OK" response.
func NewListScriptResultOK(body *ListScriptResponseBody) *lpmonit.ListScriptResult {
	v := &lpmonit.ListScriptResult{
		Code:    body.Code,
		Message: body.Message,
	}
	if body.Result != nil {
		v.Result = make([]*lpmonit.LpMointTaskItem, len(body.Result))
		for i, val := range body.Result {
			v.Result[i] = unmarshalLpMointTaskItemResponseBodyToLpmonitLpMointTaskItem(val)
		}
	}

	return v
}

// NewDeleteScriptResultOK builds a "lpmonit" service "delete_script" endpoint
// result from a HTTP "OK" response.
func NewDeleteScriptResultOK(body *DeleteScriptResponseBody) *lpmonit.DeleteScriptResult {
	v := &lpmonit.DeleteScriptResult{
		Code:    body.Code,
		Result:  body.Result,
		Message: body.Message,
	}

	return v
}

// NewRunScriptResultOK builds a "lpmonit" service "run_script" endpoint result
// from a HTTP "OK" response.
func NewRunScriptResultOK(body *RunScriptResponseBody) *lpmonit.RunScriptResult {
	v := &lpmonit.RunScriptResult{
		Code:    body.Code,
		Result:  body.Result,
		Message: body.Message,
	}

	return v
}

// NewRunResultResultOK builds a "lpmonit" service "run_result" endpoint result
// from a HTTP "OK" response.
func NewRunResultResultOK(body *RunResultResponseBody) *lpmonit.RunResultResult {
	v := &lpmonit.RunResultResult{
		Code:    body.Code,
		Result:  body.Result,
		Message: body.Message,
	}

	return v
}

// ValidateListScriptResponseBody runs the validations defined on
// list_script_response_body
func ValidateListScriptResponseBody(body *ListScriptResponseBody) (err error) {
	for _, e := range body.Result {
		if e != nil {
			if err2 := ValidateLpMointTaskItemResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateLpMointTaskItemResponseBody runs the validations defined on
// LpMointTaskItemResponseBody
func ValidateLpMointTaskItemResponseBody(body *LpMointTaskItemResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Cron == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cron", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.TaskType == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("taskType", "body"))
	}
	return
}
