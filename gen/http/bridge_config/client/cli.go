// Code generated by goa v3.11.0, DO NOT EDIT.
//
// bridgeConfig HTTP client CLI support package
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	bridgeconfig "admin-panel/gen/bridge_config"
	"encoding/json"
	"fmt"
)

// BuildBridgeCreatePayload builds the payload for the bridgeConfig
// bridgeCreate endpoint from CLI flags.
func BuildBridgeCreatePayload(bridgeConfigBridgeCreateBody string) (*bridgeconfig.BridgeItem, error) {
	var err error
	var body BridgeCreateRequestBody
	{
		err = json.Unmarshal([]byte(bridgeConfigBridgeCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"ammName\": \"Et alias eum nostrum.\",\n      \"bridgeName\": \"Asperiores sequi ea ad inventore.\",\n      \"dstChainId\": \"Non aut.\",\n      \"dstTokenId\": \"Laboriosam eaque aut aut aut quas et.\",\n      \"enableHedge\": true,\n      \"enableLimiter\": true,\n      \"relayApiKey\": \"Quam nostrum pariatur error.\",\n      \"relayUri\": \"Repellat voluptas consectetur vitae ut aliquam sed.\",\n      \"srcChainId\": \"Ut tempora perspiciatis nemo.\",\n      \"srcTokenId\": \"Ex sit et voluptatem.\",\n      \"srcWalletId\": \"Neque provident quam necessitatibus.\",\n      \"walletId\": \"Natus doloremque a quae.\"\n   }'")
		}
	}
	v := &bridgeconfig.BridgeItem{
		BridgeName:    body.BridgeName,
		SrcChainID:    body.SrcChainID,
		DstChainID:    body.DstChainID,
		SrcTokenID:    body.SrcTokenID,
		DstTokenID:    body.DstTokenID,
		WalletID:      body.WalletID,
		SrcWalletID:   body.SrcWalletID,
		AmmName:       body.AmmName,
		RelayAPIKey:   body.RelayAPIKey,
		RelayURI:      body.RelayURI,
		EnableHedge:   body.EnableHedge,
		EnableLimiter: body.EnableLimiter,
	}
	{
		var zero bool
		if v.EnableHedge == zero {
			v.EnableHedge = true
		}
	}
	{
		var zero bool
		if v.EnableLimiter == zero {
			v.EnableLimiter = true
		}
	}

	return v, nil
}

// BuildBridgeDeletePayload builds the payload for the bridgeConfig
// bridgeDelete endpoint from CLI flags.
func BuildBridgeDeletePayload(bridgeConfigBridgeDeleteBody string) (*bridgeconfig.DeleteBridgeFilter, error) {
	var err error
	var body BridgeDeleteRequestBody
	{
		err = json.Unmarshal([]byte(bridgeConfigBridgeDeleteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Et quam qui et.\"\n   }'")
		}
	}
	v := &bridgeconfig.DeleteBridgeFilter{
		ID: body.ID,
	}

	return v, nil
}

// BuildBridgeTestPayload builds the payload for the bridgeConfig bridgeTest
// endpoint from CLI flags.
func BuildBridgeTestPayload(bridgeConfigBridgeTestBody string) (*bridgeconfig.BridgeTestPayload, error) {
	var err error
	var body BridgeTestRequestBody
	{
		err = json.Unmarshal([]byte(bridgeConfigBridgeTestBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Fugit excepturi in.\"\n   }'")
		}
	}
	v := &bridgeconfig.BridgeTestPayload{
		ID: body.ID,
	}

	return v, nil
}
