// Code generated by goa v3.11.0, DO NOT EDIT.
//
// lpmonit HTTP server types
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	lpmonit "admin-panel/gen/lpmonit"

	goa "goa.design/goa/v3/pkg"
)

// AddScriptRequestBody is the type of the "lpmonit" service "add_script"
// endpoint HTTP request body.
type AddScriptRequestBody struct {
	Name       *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Cron       *string `form:"cron,omitempty" json:"cron,omitempty" xml:"cron,omitempty"`
	ScriptBody *string `form:"scriptBody,omitempty" json:"scriptBody,omitempty" xml:"scriptBody,omitempty"`
}

// DeleteScriptRequestBody is the type of the "lpmonit" service "delete_script"
// endpoint HTTP request body.
type DeleteScriptRequestBody struct {
	// Mongodb 的主键
	ID *string `form:"_id,omitempty" json:"_id,omitempty" xml:"_id,omitempty"`
}

// RunScriptRequestBody is the type of the "lpmonit" service "run_script"
// endpoint HTTP request body.
type RunScriptRequestBody struct {
	ScriptContent *string `form:"scriptContent,omitempty" json:"scriptContent,omitempty" xml:"scriptContent,omitempty"`
}

// RunResultRequestBody is the type of the "lpmonit" service "run_result"
// endpoint HTTP request body.
type RunResultRequestBody struct {
	ScriptName *string `form:"scriptName,omitempty" json:"scriptName,omitempty" xml:"scriptName,omitempty"`
}

// AddScriptResponseBody is the type of the "lpmonit" service "add_script"
// endpoint HTTP response body.
type AddScriptResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 创建后的Id
	TaskID *string `form:"task_id,omitempty" json:"task_id,omitempty" xml:"task_id,omitempty"`
	// 创建成功后的Id
	Result  *string `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ListScriptResponseBody is the type of the "lpmonit" service "list_script"
// endpoint HTTP response body.
type ListScriptResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 任务列表
	Result  []*LpMointTaskItemResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string                        `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteScriptResponseBody is the type of the "lpmonit" service
// "delete_script" endpoint HTTP response body.
type DeleteScriptResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 是否删除成功
	Result  *int64  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RunScriptResponseBody is the type of the "lpmonit" service "run_script"
// endpoint HTTP response body.
type RunScriptResponseBody struct {
	Code    *int64  `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Result  *string `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RunResultResponseBody is the type of the "lpmonit" service "run_result"
// endpoint HTTP response body.
type RunResultResponseBody struct {
	Code    *int64  `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Result  *string `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// LpMointTaskItemResponseBody is used to define fields on response body types.
type LpMointTaskItemResponseBody struct {
	ID   *string `form:"_id,omitempty" json:"_id,omitempty" xml:"_id,omitempty"`
	Name string  `form:"name" json:"name" xml:"name"`
	// 定时任务
	Cron string `form:"cron" json:"cron" xml:"cron"`
	// 创建时间戳
	CreatedAt int64 `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// 脚本路径
	ScriptPath *string `form:"scriptPath,omitempty" json:"scriptPath,omitempty" xml:"scriptPath,omitempty"`
	// 任务类型
	TaskType string `form:"taskType" json:"taskType" xml:"taskType"`
}

// NewAddScriptResponseBody builds the HTTP response body from the result of
// the "add_script" endpoint of the "lpmonit" service.
func NewAddScriptResponseBody(res *lpmonit.AddScriptResult) *AddScriptResponseBody {
	body := &AddScriptResponseBody{
		Code:    res.Code,
		TaskID:  res.TaskID,
		Result:  res.Result,
		Message: res.Message,
	}
	return body
}

// NewListScriptResponseBody builds the HTTP response body from the result of
// the "list_script" endpoint of the "lpmonit" service.
func NewListScriptResponseBody(res *lpmonit.ListScriptResult) *ListScriptResponseBody {
	body := &ListScriptResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Result != nil {
		body.Result = make([]*LpMointTaskItemResponseBody, len(res.Result))
		for i, val := range res.Result {
			body.Result[i] = marshalLpmonitLpMointTaskItemToLpMointTaskItemResponseBody(val)
		}
	}
	return body
}

// NewDeleteScriptResponseBody builds the HTTP response body from the result of
// the "delete_script" endpoint of the "lpmonit" service.
func NewDeleteScriptResponseBody(res *lpmonit.DeleteScriptResult) *DeleteScriptResponseBody {
	body := &DeleteScriptResponseBody{
		Code:    res.Code,
		Result:  res.Result,
		Message: res.Message,
	}
	return body
}

// NewRunScriptResponseBody builds the HTTP response body from the result of
// the "run_script" endpoint of the "lpmonit" service.
func NewRunScriptResponseBody(res *lpmonit.RunScriptResult) *RunScriptResponseBody {
	body := &RunScriptResponseBody{
		Code:    res.Code,
		Result:  res.Result,
		Message: res.Message,
	}
	return body
}

// NewRunResultResponseBody builds the HTTP response body from the result of
// the "run_result" endpoint of the "lpmonit" service.
func NewRunResultResponseBody(res *lpmonit.RunResultResult) *RunResultResponseBody {
	body := &RunResultResponseBody{
		Code:    res.Code,
		Result:  res.Result,
		Message: res.Message,
	}
	return body
}

// NewAddScriptPayload builds a lpmonit service add_script endpoint payload.
func NewAddScriptPayload(body *AddScriptRequestBody) *lpmonit.AddScriptPayload {
	v := &lpmonit.AddScriptPayload{
		Name:       body.Name,
		Cron:       body.Cron,
		ScriptBody: body.ScriptBody,
	}

	return v
}

// NewDeleteScriptPayload builds a lpmonit service delete_script endpoint
// payload.
func NewDeleteScriptPayload(body *DeleteScriptRequestBody) *lpmonit.DeleteScriptPayload {
	v := &lpmonit.DeleteScriptPayload{
		ID: *body.ID,
	}

	return v
}

// NewRunScriptPayload builds a lpmonit service run_script endpoint payload.
func NewRunScriptPayload(body *RunScriptRequestBody) *lpmonit.RunScriptPayload {
	v := &lpmonit.RunScriptPayload{
		ScriptContent: body.ScriptContent,
	}

	return v
}

// NewRunResultPayload builds a lpmonit service run_result endpoint payload.
func NewRunResultPayload(body *RunResultRequestBody) *lpmonit.RunResultPayload {
	v := &lpmonit.RunResultPayload{
		ScriptName: body.ScriptName,
	}

	return v
}

// ValidateDeleteScriptRequestBody runs the validations defined on
// delete_script_request_body
func ValidateDeleteScriptRequestBody(body *DeleteScriptRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("_id", "body"))
	}
	return
}
