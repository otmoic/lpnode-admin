// Code generated by goa v3.11.0, DO NOT EDIT.
//
// tokenManager endpoints
//
// Command:
// $ goa gen admin-panel/design

package tokenmanager

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "tokenManager" service endpoints.
type Endpoints struct {
	TokenList   goa.Endpoint
	TokenCreate goa.Endpoint
	TokenDelete goa.Endpoint
}

// NewEndpoints wraps the methods of the "tokenManager" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		TokenList:   NewTokenListEndpoint(s),
		TokenCreate: NewTokenCreateEndpoint(s),
		TokenDelete: NewTokenDeleteEndpoint(s),
	}
}

// Use applies the given middleware to all the "tokenManager" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.TokenList = m(e.TokenList)
	e.TokenCreate = m(e.TokenCreate)
	e.TokenDelete = m(e.TokenDelete)
}

// NewTokenListEndpoint returns an endpoint function that calls the method
// "tokenList" of service "tokenManager".
func NewTokenListEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.TokenList(ctx)
	}
}

// NewTokenCreateEndpoint returns an endpoint function that calls the method
// "tokenCreate" of service "tokenManager".
func NewTokenCreateEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*TokenItem)
		return s.TokenCreate(ctx, p)
	}
}

// NewTokenDeleteEndpoint returns an endpoint function that calls the method
// "tokenDelete" of service "tokenManager".
func NewTokenDeleteEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*DeleteTokenFilter)
		return s.TokenDelete(ctx, p)
	}
}
