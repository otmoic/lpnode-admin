// Code generated by goa v3.11.0, DO NOT EDIT.
//
// relayList HTTP client encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	relaylist "admin-panel/gen/relay_list"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildListRelayRequest instantiates a HTTP request object with method and
// path set to call the "relayList" service "listRelay" endpoint
func (c *Client) BuildListRelayRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListRelayRelayListPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("relayList", "listRelay", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListRelayResponse returns a decoder for responses returned by the
// relayList listRelay endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeListRelayResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListRelayResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("relayList", "listRelay", err)
			}
			err = ValidateListRelayResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("relayList", "listRelay", err)
			}
			res := NewListRelayResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("relayList", "listRelay", resp.StatusCode, string(body))
		}
	}
}

// unmarshalRelayListRelayItemResponseBodyToRelaylistRelayListRelayItem builds
// a value of type *relaylist.RelayListRelayItem from a value of type
// *RelayListRelayItemResponseBody.
func unmarshalRelayListRelayItemResponseBodyToRelaylistRelayListRelayItem(v *RelayListRelayItemResponseBody) *relaylist.RelayListRelayItem {
	if v == nil {
		return nil
	}
	res := &relaylist.RelayListRelayItem{
		ID:           v.ID,
		Name:         v.Name,
		Profile:      v.Profile,
		LpIDFake:     v.LpIDFake,
		LpNodeAPIKey: v.LpNodeAPIKey,
		RelayAPIKey:  v.RelayAPIKey,
		RelayURI:     v.RelayURI,
	}

	return res
}
