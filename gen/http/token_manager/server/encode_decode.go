// Code generated by goa v3.11.0, DO NOT EDIT.
//
// tokenManager HTTP server encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	tokenmanager "admin-panel/gen/token_manager"
	"context"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeTokenListResponse returns an encoder for responses returned by the
// tokenManager tokenList endpoint.
func EncodeTokenListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*tokenmanager.TokenListResult)
		enc := encoder(ctx, w)
		body := NewTokenListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeTokenCreateResponse returns an encoder for responses returned by the
// tokenManager tokenCreate endpoint.
func EncodeTokenCreateResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*tokenmanager.TokenCreateResult)
		enc := encoder(ctx, w)
		body := NewTokenCreateResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeTokenCreateRequest returns a decoder for requests sent to the
// tokenManager tokenCreate endpoint.
func DecodeTokenCreateRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body TokenCreateRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateTokenCreateRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewTokenCreateTokenItem(&body)

		return payload, nil
	}
}

// EncodeTokenDeleteResponse returns an encoder for responses returned by the
// tokenManager tokenDelete endpoint.
func EncodeTokenDeleteResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*tokenmanager.TokenDeleteResult)
		enc := encoder(ctx, w)
		body := NewTokenDeleteResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeTokenDeleteRequest returns a decoder for requests sent to the
// tokenManager tokenDelete endpoint.
func DecodeTokenDeleteRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body TokenDeleteRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateTokenDeleteRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewTokenDeleteDeleteTokenFilter(&body)

		return payload, nil
	}
}

// marshalTokenmanagerTokenItemToTokenItemResponseBody builds a value of type
// *TokenItemResponseBody from a value of type *tokenmanager.TokenItem.
func marshalTokenmanagerTokenItemToTokenItemResponseBody(v *tokenmanager.TokenItem) *TokenItemResponseBody {
	if v == nil {
		return nil
	}
	res := &TokenItemResponseBody{
		ID:         v.ID,
		TokenID:    v.TokenID,
		ChainID:    v.ChainID,
		Address:    v.Address,
		TokenName:  v.TokenName,
		MarketName: v.MarketName,
		Precision:  v.Precision,
		ChainType:  v.ChainType,
		CoinType:   v.CoinType,
	}

	return res
}
