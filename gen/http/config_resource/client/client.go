// Code generated by goa v3.11.0, DO NOT EDIT.
//
// configResource client HTTP transport
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the configResource service endpoint HTTP clients.
type Client struct {
	// CreateResource Doer is the HTTP client used to make requests to the
	// createResource endpoint.
	CreateResourceDoer goahttp.Doer

	// GetResource Doer is the HTTP client used to make requests to the getResource
	// endpoint.
	GetResourceDoer goahttp.Doer

	// ListResource Doer is the HTTP client used to make requests to the
	// listResource endpoint.
	ListResourceDoer goahttp.Doer

	// DeleteResult Doer is the HTTP client used to make requests to the
	// deleteResult endpoint.
	DeleteResultDoer goahttp.Doer

	// EditResult Doer is the HTTP client used to make requests to the editResult
	// endpoint.
	EditResultDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the configResource service
// servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		CreateResourceDoer:  doer,
		GetResourceDoer:     doer,
		ListResourceDoer:    doer,
		DeleteResultDoer:    doer,
		EditResultDoer:      doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// CreateResource returns an endpoint that makes HTTP requests to the
// configResource service createResource server.
func (c *Client) CreateResource() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateResourceRequest(c.encoder)
		decodeResponse = DecodeCreateResourceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateResourceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateResourceDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("configResource", "createResource", err)
		}
		return decodeResponse(resp)
	}
}

// GetResource returns an endpoint that makes HTTP requests to the
// configResource service getResource server.
func (c *Client) GetResource() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetResourceRequest(c.encoder)
		decodeResponse = DecodeGetResourceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetResourceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetResourceDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("configResource", "getResource", err)
		}
		return decodeResponse(resp)
	}
}

// ListResource returns an endpoint that makes HTTP requests to the
// configResource service listResource server.
func (c *Client) ListResource() goa.Endpoint {
	var (
		decodeResponse = DecodeListResourceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListResourceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListResourceDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("configResource", "listResource", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteResult returns an endpoint that makes HTTP requests to the
// configResource service deleteResult server.
func (c *Client) DeleteResult() goa.Endpoint {
	var (
		decodeResponse = DecodeDeleteResultResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteResultRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteResultDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("configResource", "deleteResult", err)
		}
		return decodeResponse(resp)
	}
}

// EditResult returns an endpoint that makes HTTP requests to the
// configResource service editResult server.
func (c *Client) EditResult() goa.Endpoint {
	var (
		encodeRequest  = EncodeEditResultRequest(c.encoder)
		decodeResponse = DecodeEditResultResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildEditResultRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.EditResultDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("configResource", "editResult", err)
		}
		return decodeResponse(resp)
	}
}
