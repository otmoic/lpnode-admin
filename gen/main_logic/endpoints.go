// Code generated by goa v3.11.0, DO NOT EDIT.
//
// mainLogic endpoints
//
// Command:
// $ goa gen admin-panel/design

package mainlogic

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "mainLogic" service endpoints.
type Endpoints struct {
	MainLogic     goa.Endpoint
	MainLogicLink goa.Endpoint
}

// NewEndpoints wraps the methods of the "mainLogic" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		MainLogic:     NewMainLogicEndpoint(s),
		MainLogicLink: NewMainLogicLinkEndpoint(s),
	}
}

// Use applies the given middleware to all the "mainLogic" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.MainLogic = m(e.MainLogic)
	e.MainLogicLink = m(e.MainLogicLink)
}

// NewMainLogicEndpoint returns an endpoint function that calls the method
// "mainLogic" of service "mainLogic".
func NewMainLogicEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return nil, s.MainLogic(ctx)
	}
}

// NewMainLogicLinkEndpoint returns an endpoint function that calls the method
// "mainLogicLink" of service "mainLogic".
func NewMainLogicLinkEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.MainLogicLink(ctx)
	}
}
