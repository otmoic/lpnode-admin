// Code generated by goa v3.11.0, DO NOT EDIT.
//
// installCtrlPanel HTTP server encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	installctrlpanel "admin-panel/gen/install_ctrl_panel"
	"context"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListInstallResponse returns an encoder for responses returned by the
// installCtrlPanel listInstall endpoint.
func EncodeListInstallResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*installctrlpanel.ListInstallResult)
		enc := encoder(ctx, w)
		body := NewListInstallResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListInstallRequest returns a decoder for requests sent to the
// installCtrlPanel listInstall endpoint.
func DecodeListInstallRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body ListInstallRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateListInstallRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewListInstallPayload(&body)

		return payload, nil
	}
}

// EncodeInstallLpClientResponse returns an encoder for responses returned by
// the installCtrlPanel installLpClient endpoint.
func EncodeInstallLpClientResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*installctrlpanel.InstallLpClientResult)
		enc := encoder(ctx, w)
		body := NewInstallLpClientResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeInstallLpClientRequest returns a decoder for requests sent to the
// installCtrlPanel installLpClient endpoint.
func DecodeInstallLpClientRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body InstallLpClientRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateInstallLpClientRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewInstallLpClientPayload(&body)

		return payload, nil
	}
}

// EncodeUninstallLpClientResponse returns an encoder for responses returned by
// the installCtrlPanel uninstallLpClient endpoint.
func EncodeUninstallLpClientResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*installctrlpanel.UninstallLpClientResult)
		enc := encoder(ctx, w)
		body := NewUninstallLpClientResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUninstallLpClientRequest returns a decoder for requests sent to the
// installCtrlPanel uninstallLpClient endpoint.
func DecodeUninstallLpClientRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UninstallLpClientRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUninstallLpClientRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUninstallLpClientPayload(&body)

		return payload, nil
	}
}

// EncodeInstallDeploymentResponse returns an encoder for responses returned by
// the installCtrlPanel installDeployment endpoint.
func EncodeInstallDeploymentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*installctrlpanel.InstallDeploymentResult)
		enc := encoder(ctx, w)
		body := NewInstallDeploymentResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeInstallDeploymentRequest returns a decoder for requests sent to the
// installCtrlPanel installDeployment endpoint.
func DecodeInstallDeploymentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body InstallDeploymentRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateInstallDeploymentRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewInstallDeploymentPayload(&body)

		return payload, nil
	}
}

// EncodeUninstallDeploymentResponse returns an encoder for responses returned
// by the installCtrlPanel uninstallDeployment endpoint.
func EncodeUninstallDeploymentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*installctrlpanel.UninstallDeploymentResult)
		enc := encoder(ctx, w)
		body := NewUninstallDeploymentResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUninstallDeploymentRequest returns a decoder for requests sent to the
// installCtrlPanel uninstallDeployment endpoint.
func DecodeUninstallDeploymentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UninstallDeploymentRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUninstallDeploymentRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUninstallDeploymentPayload(&body)

		return payload, nil
	}
}

// EncodeUpdateDeploymentResponse returns an encoder for responses returned by
// the installCtrlPanel updateDeployment endpoint.
func EncodeUpdateDeploymentResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*installctrlpanel.UpdateDeploymentResult)
		enc := encoder(ctx, w)
		body := NewUpdateDeploymentResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdateDeploymentRequest returns a decoder for requests sent to the
// installCtrlPanel updateDeployment endpoint.
func DecodeUpdateDeploymentRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdateDeploymentRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdateDeploymentRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewUpdateDeploymentPayload(&body)

		return payload, nil
	}
}

// marshalInstallctrlpanelCtrlDeploayItemToCtrlDeploayItemResponseBody builds a
// value of type *CtrlDeploayItemResponseBody from a value of type
// *installctrlpanel.CtrlDeploayItem.
func marshalInstallctrlpanelCtrlDeploayItemToCtrlDeploayItemResponseBody(v *installctrlpanel.CtrlDeploayItem) *CtrlDeploayItemResponseBody {
	if v == nil {
		return nil
	}
	res := &CtrlDeploayItemResponseBody{
		InstallType:    v.InstallType,
		Name:           v.Name,
		Status:         v.Status,
		InstallContext: v.InstallContext,
		Yaml:           v.Yaml,
	}

	return res
}

// unmarshalAmmClientSetupConfigRequestBodyToInstallctrlpanelAmmClientSetupConfig
// builds a value of type *installctrlpanel.AmmClientSetupConfig from a value
// of type *AmmClientSetupConfigRequestBody.
func unmarshalAmmClientSetupConfigRequestBodyToInstallctrlpanelAmmClientSetupConfig(v *AmmClientSetupConfigRequestBody) *installctrlpanel.AmmClientSetupConfig {
	res := &installctrlpanel.AmmClientSetupConfig{
		ImageRepository:       *v.ImageRepository,
		ServiceName:           v.ServiceName,
		DeploymentName:        v.DeploymentName,
		Type:                  *v.Type,
		StartBlock:            v.StartBlock,
		RPCURL:                v.RPCURL,
		ConnectionNodeurl:     v.ConnectionNodeurl,
		ConnectionWalleturl:   v.ConnectionWalleturl,
		ConnectionHelperurl:   v.ConnectionHelperurl,
		ConnectionExplorerurl: v.ConnectionExplorerurl,
		AwsAccessKeyID:        v.AwsAccessKeyID,
		ContainerPort:         v.ContainerPort,
		AwsSecretAccessKey:    v.AwsSecretAccessKey,
		Install:               *v.Install,
	}
	if v.CustomEnv != nil {
		res.CustomEnv = make([]*installctrlpanel.DeploymentSetupConfigEnvItem, len(v.CustomEnv))
		for i, val := range v.CustomEnv {
			res.CustomEnv[i] = unmarshalDeploymentSetupConfigEnvItemRequestBodyToInstallctrlpanelDeploymentSetupConfigEnvItem(val)
		}
	}

	return res
}

// unmarshalDeploymentSetupConfigEnvItemRequestBodyToInstallctrlpanelDeploymentSetupConfigEnvItem
// builds a value of type *installctrlpanel.DeploymentSetupConfigEnvItem from a
// value of type *DeploymentSetupConfigEnvItemRequestBody.
func unmarshalDeploymentSetupConfigEnvItemRequestBodyToInstallctrlpanelDeploymentSetupConfigEnvItem(v *DeploymentSetupConfigEnvItemRequestBody) *installctrlpanel.DeploymentSetupConfigEnvItem {
	if v == nil {
		return nil
	}
	res := &installctrlpanel.DeploymentSetupConfigEnvItem{
		Key:   v.Key,
		Value: v.Value,
	}

	return res
}

// unmarshalAmmClientUnSetupConfigRequestBodyToInstallctrlpanelAmmClientUnSetupConfig
// builds a value of type *installctrlpanel.AmmClientUnSetupConfig from a value
// of type *AmmClientUnSetupConfigRequestBody.
func unmarshalAmmClientUnSetupConfigRequestBodyToInstallctrlpanelAmmClientUnSetupConfig(v *AmmClientUnSetupConfigRequestBody) *installctrlpanel.AmmClientUnSetupConfig {
	res := &installctrlpanel.AmmClientUnSetupConfig{
		Type:      v.Type,
		Uninstall: v.Uninstall,
	}

	return res
}

// unmarshalDeploymentSetupConfigRequestBodyToInstallctrlpanelDeploymentSetupConfig
// builds a value of type *installctrlpanel.DeploymentSetupConfig from a value
// of type *DeploymentSetupConfigRequestBody.
func unmarshalDeploymentSetupConfigRequestBodyToInstallctrlpanelDeploymentSetupConfig(v *DeploymentSetupConfigRequestBody) *installctrlpanel.DeploymentSetupConfig {
	res := &installctrlpanel.DeploymentSetupConfig{
		ImageRepository: *v.ImageRepository,
		ContainerPort:   v.ContainerPort,
		Install:         *v.Install,
		InstallType:     *v.InstallType,
		Name:            *v.Name,
	}
	if v.CustomEnv != nil {
		res.CustomEnv = make([]*installctrlpanel.DeploymentSetupConfigEnvItem, len(v.CustomEnv))
		for i, val := range v.CustomEnv {
			res.CustomEnv[i] = unmarshalDeploymentSetupConfigEnvItemRequestBodyToInstallctrlpanelDeploymentSetupConfigEnvItem(val)
		}
	}

	return res
}

// marshalInstallctrlpanelInstallDeploymentDataResultToInstallDeploymentDataResultResponseBody
// builds a value of type *InstallDeploymentDataResultResponseBody from a value
// of type *installctrlpanel.InstallDeploymentDataResult.
func marshalInstallctrlpanelInstallDeploymentDataResultToInstallDeploymentDataResultResponseBody(v *installctrlpanel.InstallDeploymentDataResult) *InstallDeploymentDataResultResponseBody {
	if v == nil {
		return nil
	}
	res := &InstallDeploymentDataResultResponseBody{
		CmdStdout: v.CmdStdout,
		CmdStderr: v.CmdStderr,
		Template:  v.Template,
	}

	return res
}

// unmarshalUnDeploymentSetupConfigRequestBodyToInstallctrlpanelUnDeploymentSetupConfig
// builds a value of type *installctrlpanel.UnDeploymentSetupConfig from a
// value of type *UnDeploymentSetupConfigRequestBody.
func unmarshalUnDeploymentSetupConfigRequestBodyToInstallctrlpanelUnDeploymentSetupConfig(v *UnDeploymentSetupConfigRequestBody) *installctrlpanel.UnDeploymentSetupConfig {
	res := &installctrlpanel.UnDeploymentSetupConfig{
		Uninstall:   *v.Uninstall,
		InstallType: *v.InstallType,
		Name:        *v.Name,
	}

	return res
}

// marshalInstallctrlpanelUnInstallDeploymentDataResultToUnInstallDeploymentDataResultResponseBody
// builds a value of type *UnInstallDeploymentDataResultResponseBody from a
// value of type *installctrlpanel.UnInstallDeploymentDataResult.
func marshalInstallctrlpanelUnInstallDeploymentDataResultToUnInstallDeploymentDataResultResponseBody(v *installctrlpanel.UnInstallDeploymentDataResult) *UnInstallDeploymentDataResultResponseBody {
	if v == nil {
		return nil
	}
	res := &UnInstallDeploymentDataResultResponseBody{
		CmdStdout: v.CmdStdout,
		CmdStderr: v.CmdStderr,
		Template:  v.Template,
	}

	return res
}

// unmarshalUpdateDeploymentConfigRequestBodyToInstallctrlpanelUpdateDeploymentConfig
// builds a value of type *installctrlpanel.UpdateDeploymentConfig from a value
// of type *UpdateDeploymentConfigRequestBody.
func unmarshalUpdateDeploymentConfigRequestBodyToInstallctrlpanelUpdateDeploymentConfig(v *UpdateDeploymentConfigRequestBody) *installctrlpanel.UpdateDeploymentConfig {
	res := &installctrlpanel.UpdateDeploymentConfig{
		InstallType:    *v.InstallType,
		Name:           *v.Name,
		InstallContext: v.InstallContext,
		Update:         *v.Update,
	}

	return res
}
