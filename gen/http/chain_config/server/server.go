// Code generated by goa v3.11.0, DO NOT EDIT.
//
// chainConfig HTTP server
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	chainconfig "admin-panel/gen/chain_config"
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the chainConfig service endpoint HTTP handlers.
type Server struct {
	Mounts               []*MountPoint
	SetChainList         http.Handler
	DelChainList         http.Handler
	ChainList            http.Handler
	SetChainGasUsd       http.Handler
	SetChainClientConfig http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the chainConfig service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *chainconfig.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"SetChainList", "POST", "/lpnode/lpnode_admin_panel/chainConfig/setChainList"},
			{"DelChainList", "POST", "/lpnode/lpnode_admin_panel/chainConfig/delChainList"},
			{"ChainList", "GET", "/lpnode/lpnode_admin_panel/chainConfig/chainList"},
			{"SetChainGasUsd", "POST", "/lpnode/lpnode_admin_panel/chainConfig/setChainGasUsd"},
			{"SetChainClientConfig", "POST", "/lpnode/lpnode_admin_panel/chainConfig/setChainClientConfig"},
		},
		SetChainList:         NewSetChainListHandler(e.SetChainList, mux, decoder, encoder, errhandler, formatter),
		DelChainList:         NewDelChainListHandler(e.DelChainList, mux, decoder, encoder, errhandler, formatter),
		ChainList:            NewChainListHandler(e.ChainList, mux, decoder, encoder, errhandler, formatter),
		SetChainGasUsd:       NewSetChainGasUsdHandler(e.SetChainGasUsd, mux, decoder, encoder, errhandler, formatter),
		SetChainClientConfig: NewSetChainClientConfigHandler(e.SetChainClientConfig, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "chainConfig" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.SetChainList = m(s.SetChainList)
	s.DelChainList = m(s.DelChainList)
	s.ChainList = m(s.ChainList)
	s.SetChainGasUsd = m(s.SetChainGasUsd)
	s.SetChainClientConfig = m(s.SetChainClientConfig)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return chainconfig.MethodNames[:] }

// Mount configures the mux to serve the chainConfig endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountSetChainListHandler(mux, h.SetChainList)
	MountDelChainListHandler(mux, h.DelChainList)
	MountChainListHandler(mux, h.ChainList)
	MountSetChainGasUsdHandler(mux, h.SetChainGasUsd)
	MountSetChainClientConfigHandler(mux, h.SetChainClientConfig)
}

// Mount configures the mux to serve the chainConfig endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountSetChainListHandler configures the mux to serve the "chainConfig"
// service "setChainList" endpoint.
func MountSetChainListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/chainConfig/setChainList", f)
}

// NewSetChainListHandler creates a HTTP handler which loads the HTTP request
// and calls the "chainConfig" service "setChainList" endpoint.
func NewSetChainListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSetChainListRequest(mux, decoder)
		encodeResponse = EncodeSetChainListResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "setChainList")
		ctx = context.WithValue(ctx, goa.ServiceKey, "chainConfig")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDelChainListHandler configures the mux to serve the "chainConfig"
// service "delChainList" endpoint.
func MountDelChainListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/chainConfig/delChainList", f)
}

// NewDelChainListHandler creates a HTTP handler which loads the HTTP request
// and calls the "chainConfig" service "delChainList" endpoint.
func NewDelChainListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDelChainListRequest(mux, decoder)
		encodeResponse = EncodeDelChainListResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delChainList")
		ctx = context.WithValue(ctx, goa.ServiceKey, "chainConfig")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountChainListHandler configures the mux to serve the "chainConfig" service
// "chainList" endpoint.
func MountChainListHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/lpnode/lpnode_admin_panel/chainConfig/chainList", f)
}

// NewChainListHandler creates a HTTP handler which loads the HTTP request and
// calls the "chainConfig" service "chainList" endpoint.
func NewChainListHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeChainListResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "chainList")
		ctx = context.WithValue(ctx, goa.ServiceKey, "chainConfig")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSetChainGasUsdHandler configures the mux to serve the "chainConfig"
// service "setChainGasUsd" endpoint.
func MountSetChainGasUsdHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/chainConfig/setChainGasUsd", f)
}

// NewSetChainGasUsdHandler creates a HTTP handler which loads the HTTP request
// and calls the "chainConfig" service "setChainGasUsd" endpoint.
func NewSetChainGasUsdHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSetChainGasUsdRequest(mux, decoder)
		encodeResponse = EncodeSetChainGasUsdResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "setChainGasUsd")
		ctx = context.WithValue(ctx, goa.ServiceKey, "chainConfig")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSetChainClientConfigHandler configures the mux to serve the
// "chainConfig" service "setChainClientConfig" endpoint.
func MountSetChainClientConfigHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/chainConfig/setChainClientConfig", f)
}

// NewSetChainClientConfigHandler creates a HTTP handler which loads the HTTP
// request and calls the "chainConfig" service "setChainClientConfig" endpoint.
func NewSetChainClientConfigHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSetChainClientConfigRequest(mux, decoder)
		encodeResponse = EncodeSetChainClientConfigResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "setChainClientConfig")
		ctx = context.WithValue(ctx, goa.ServiceKey, "chainConfig")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
