// Code generated by goa v3.11.0, DO NOT EDIT.
//
// hedge HTTP client types
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	hedge "admin-panel/gen/hedge"
)

// EditRequestBody is the type of the "hedge" service "edit" endpoint HTTP
// request body.
type EditRequestBody struct {
	Hedge *HedgeItemRequestBody `form:"hedge,omitempty" json:"hedge,omitempty" xml:"hedge,omitempty"`
}

// DelRequestBody is the type of the "hedge" service "del" endpoint HTTP
// request body.
type DelRequestBody struct {
	// primary key
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// ListResponseBody is the type of the "hedge" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// list
	Data    []*HedgeItemResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Message *string                  `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// EditResponseBody is the type of the "hedge" service "edit" endpoint HTTP
// response body.
type EditResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// result
	Data    *int64  `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DelResponseBody is the type of the "hedge" service "del" endpoint HTTP
// response body.
type DelResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// result
	Data    *int64  `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// HedgeItemResponseBody is used to define fields on response body types.
type HedgeItemResponseBody struct {
	ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	HedgeType *string `form:"hedgeType,omitempty" json:"hedgeType,omitempty" xml:"hedgeType,omitempty"`
}

// HedgeItemRequestBody is used to define fields on request body types.
type HedgeItemRequestBody struct {
	ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	HedgeType *string `form:"hedgeType,omitempty" json:"hedgeType,omitempty" xml:"hedgeType,omitempty"`
}

// NewEditRequestBody builds the HTTP request body from the payload of the
// "edit" endpoint of the "hedge" service.
func NewEditRequestBody(p *hedge.EditPayload) *EditRequestBody {
	body := &EditRequestBody{}
	if p.Hedge != nil {
		body.Hedge = marshalHedgeHedgeItemToHedgeItemRequestBody(p.Hedge)
	}
	return body
}

// NewDelRequestBody builds the HTTP request body from the payload of the "del"
// endpoint of the "hedge" service.
func NewDelRequestBody(p *hedge.DelPayload) *DelRequestBody {
	body := &DelRequestBody{
		ID: p.ID,
	}
	return body
}

// NewListResultOK builds a "hedge" service "list" endpoint result from a HTTP
// "OK" response.
func NewListResultOK(body *ListResponseBody) *hedge.ListResult {
	v := &hedge.ListResult{
		Code:    body.Code,
		Message: body.Message,
	}
	if body.Data != nil {
		v.Data = make([]*hedge.HedgeItem, len(body.Data))
		for i, val := range body.Data {
			v.Data[i] = unmarshalHedgeItemResponseBodyToHedgeHedgeItem(val)
		}
	}

	return v
}

// NewEditResultOK builds a "hedge" service "edit" endpoint result from a HTTP
// "OK" response.
func NewEditResultOK(body *EditResponseBody) *hedge.EditResult {
	v := &hedge.EditResult{
		Code:    body.Code,
		Data:    body.Data,
		Message: body.Message,
	}

	return v
}

// NewDelResultOK builds a "hedge" service "del" endpoint result from a HTTP
// "OK" response.
func NewDelResultOK(body *DelResponseBody) *hedge.DelResult {
	v := &hedge.DelResult{
		Code:    body.Code,
		Data:    body.Data,
		Message: body.Message,
	}

	return v
}
