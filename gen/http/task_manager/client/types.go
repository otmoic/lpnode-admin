// Code generated by goa v3.11.0, DO NOT EDIT.
//
// taskManager HTTP client types
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	taskmanager "admin-panel/gen/task_manager"

	goa "goa.design/goa/v3/pkg"
)

// TaskDeployRequestBody is the type of the "taskManager" service "taskDeploy"
// endpoint HTTP request body.
type TaskDeployRequestBody struct {
	ID *string `form:"_id,omitempty" json:"_id,omitempty" xml:"_id,omitempty"`
}

// UnDeployRequestBody is the type of the "taskManager" service "unDeploy"
// endpoint HTTP request body.
type UnDeployRequestBody struct {
	ID *string `form:"_id,omitempty" json:"_id,omitempty" xml:"_id,omitempty"`
}

// TaskCreateRequestBody is the type of the "taskManager" service "taskCreate"
// endpoint HTTP request body.
type TaskCreateRequestBody struct {
	ID            *string `form:"_id,omitempty" json:"_id,omitempty" xml:"_id,omitempty"`
	Schedule      *string `form:"schedule,omitempty" json:"schedule,omitempty" xml:"schedule,omitempty"`
	TaskType      *string `form:"taskType,omitempty" json:"taskType,omitempty" xml:"taskType,omitempty"`
	Deployed      *bool   `form:"deployed,omitempty" json:"deployed,omitempty" xml:"deployed,omitempty"`
	DeployMessage *string `form:"deployMessage,omitempty" json:"deployMessage,omitempty" xml:"deployMessage,omitempty"`
	ScriptPath    *string `form:"scriptPath,omitempty" json:"scriptPath,omitempty" xml:"scriptPath,omitempty"`
	ScriptBody    *string `form:"scriptBody,omitempty" json:"scriptBody,omitempty" xml:"scriptBody,omitempty"`
}

// TaskListResponseBody is the type of the "taskManager" service "taskList"
// endpoint HTTP response body.
type TaskListResponseBody struct {
	Code    *int64                  `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Result  []*TaskItemResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string                 `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// TaskDeployResponseBody is the type of the "taskManager" service "taskDeploy"
// endpoint HTTP response body.
type TaskDeployResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 创建影响的行数
	Result  *int64  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UnDeployResponseBody is the type of the "taskManager" service "unDeploy"
// endpoint HTTP response body.
type UnDeployResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 创建影响的行数
	Result  *int64  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// TaskCreateResponseBody is the type of the "taskManager" service "taskCreate"
// endpoint HTTP response body.
type TaskCreateResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 创建影响的行数
	Result  *int64  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// TaskItemResponseBody is used to define fields on response body types.
type TaskItemResponseBody struct {
	ID            *string `form:"_id,omitempty" json:"_id,omitempty" xml:"_id,omitempty"`
	Schedule      *string `form:"schedule,omitempty" json:"schedule,omitempty" xml:"schedule,omitempty"`
	TaskType      *string `form:"taskType,omitempty" json:"taskType,omitempty" xml:"taskType,omitempty"`
	Deployed      *bool   `form:"deployed,omitempty" json:"deployed,omitempty" xml:"deployed,omitempty"`
	DeployMessage *string `form:"deployMessage,omitempty" json:"deployMessage,omitempty" xml:"deployMessage,omitempty"`
	ScriptPath    *string `form:"scriptPath,omitempty" json:"scriptPath,omitempty" xml:"scriptPath,omitempty"`
	ScriptBody    *string `form:"scriptBody,omitempty" json:"scriptBody,omitempty" xml:"scriptBody,omitempty"`
}

// NewTaskDeployRequestBody builds the HTTP request body from the payload of
// the "taskDeploy" endpoint of the "taskManager" service.
func NewTaskDeployRequestBody(p *taskmanager.TaskDeploy2) *TaskDeployRequestBody {
	body := &TaskDeployRequestBody{
		ID: p.ID,
	}
	return body
}

// NewUnDeployRequestBody builds the HTTP request body from the payload of the
// "unDeploy" endpoint of the "taskManager" service.
func NewUnDeployRequestBody(p *taskmanager.TaskDeploy2) *UnDeployRequestBody {
	body := &UnDeployRequestBody{
		ID: p.ID,
	}
	return body
}

// NewTaskCreateRequestBody builds the HTTP request body from the payload of
// the "taskCreate" endpoint of the "taskManager" service.
func NewTaskCreateRequestBody(p *taskmanager.TaskItem) *TaskCreateRequestBody {
	body := &TaskCreateRequestBody{
		ID:            p.ID,
		Schedule:      p.Schedule,
		TaskType:      p.TaskType,
		Deployed:      p.Deployed,
		DeployMessage: p.DeployMessage,
		ScriptPath:    p.ScriptPath,
		ScriptBody:    p.ScriptBody,
	}
	return body
}

// NewTaskListResultOK builds a "taskManager" service "taskList" endpoint
// result from a HTTP "OK" response.
func NewTaskListResultOK(body *TaskListResponseBody) *taskmanager.TaskListResult {
	v := &taskmanager.TaskListResult{
		Code:    body.Code,
		Message: body.Message,
	}
	if body.Result != nil {
		v.Result = make([]*taskmanager.TaskItem, len(body.Result))
		for i, val := range body.Result {
			v.Result[i] = unmarshalTaskItemResponseBodyToTaskmanagerTaskItem(val)
		}
	}

	return v
}

// NewTaskDeployResultOK builds a "taskManager" service "taskDeploy" endpoint
// result from a HTTP "OK" response.
func NewTaskDeployResultOK(body *TaskDeployResponseBody) *taskmanager.TaskDeployResult {
	v := &taskmanager.TaskDeployResult{
		Code:    body.Code,
		Result:  body.Result,
		Message: body.Message,
	}

	return v
}

// NewUnDeployResultOK builds a "taskManager" service "unDeploy" endpoint
// result from a HTTP "OK" response.
func NewUnDeployResultOK(body *UnDeployResponseBody) *taskmanager.UnDeployResult {
	v := &taskmanager.UnDeployResult{
		Code:    body.Code,
		Result:  body.Result,
		Message: body.Message,
	}

	return v
}

// NewTaskCreateResultOK builds a "taskManager" service "taskCreate" endpoint
// result from a HTTP "OK" response.
func NewTaskCreateResultOK(body *TaskCreateResponseBody) *taskmanager.TaskCreateResult {
	v := &taskmanager.TaskCreateResult{
		Code:    body.Code,
		Result:  body.Result,
		Message: body.Message,
	}

	return v
}

// ValidateTaskListResponseBody runs the validations defined on
// TaskListResponseBody
func ValidateTaskListResponseBody(body *TaskListResponseBody) (err error) {
	for _, e := range body.Result {
		if e != nil {
			if err2 := ValidateTaskItemResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTaskItemResponseBody runs the validations defined on
// TaskItemResponseBody
func ValidateTaskItemResponseBody(body *TaskItemResponseBody) (err error) {
	if body.TaskType != nil {
		if !(*body.TaskType == "customize") {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.taskType", *body.TaskType, []interface{}{"customize"}))
		}
	}
	return
}
