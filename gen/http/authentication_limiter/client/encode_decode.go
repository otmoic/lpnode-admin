// Code generated by goa v3.11.0, DO NOT EDIT.
//
// authenticationLimiter HTTP client encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	authenticationlimiter "admin-panel/gen/authentication_limiter"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildGetAuthenticationLimiterRequest instantiates a HTTP request object with
// method and path set to call the "authenticationLimiter" service
// "getAuthenticationLimiter" endpoint
func (c *Client) BuildGetAuthenticationLimiterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetAuthenticationLimiterAuthenticationLimiterPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("authenticationLimiter", "getAuthenticationLimiter", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetAuthenticationLimiterResponse returns a decoder for responses
// returned by the authenticationLimiter getAuthenticationLimiter endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
func DecodeGetAuthenticationLimiterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetAuthenticationLimiterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("authenticationLimiter", "getAuthenticationLimiter", err)
			}
			res := NewGetAuthenticationLimiterResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("authenticationLimiter", "getAuthenticationLimiter", resp.StatusCode, string(body))
		}
	}
}

// BuildSetAuthenticationLimiterRequest instantiates a HTTP request object with
// method and path set to call the "authenticationLimiter" service
// "setAuthenticationLimiter" endpoint
func (c *Client) BuildSetAuthenticationLimiterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: SetAuthenticationLimiterAuthenticationLimiterPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("authenticationLimiter", "setAuthenticationLimiter", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeSetAuthenticationLimiterRequest returns an encoder for requests sent
// to the authenticationLimiter setAuthenticationLimiter server.
func EncodeSetAuthenticationLimiterRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*authenticationlimiter.SetAuthenticationLimiterPayload)
		if !ok {
			return goahttp.ErrInvalidType("authenticationLimiter", "setAuthenticationLimiter", "*authenticationlimiter.SetAuthenticationLimiterPayload", v)
		}
		body := NewSetAuthenticationLimiterRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("authenticationLimiter", "setAuthenticationLimiter", err)
		}
		return nil
	}
}

// DecodeSetAuthenticationLimiterResponse returns a decoder for responses
// returned by the authenticationLimiter setAuthenticationLimiter endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
func DecodeSetAuthenticationLimiterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body SetAuthenticationLimiterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("authenticationLimiter", "setAuthenticationLimiter", err)
			}
			res := NewSetAuthenticationLimiterResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("authenticationLimiter", "setAuthenticationLimiter", resp.StatusCode, string(body))
		}
	}
}

// BuildDelAuthenticationLimiterRequest instantiates a HTTP request object with
// method and path set to call the "authenticationLimiter" service
// "delAuthenticationLimiter" endpoint
func (c *Client) BuildDelAuthenticationLimiterRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DelAuthenticationLimiterAuthenticationLimiterPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("authenticationLimiter", "delAuthenticationLimiter", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDelAuthenticationLimiterResponse returns a decoder for responses
// returned by the authenticationLimiter delAuthenticationLimiter endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
func DecodeDelAuthenticationLimiterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DelAuthenticationLimiterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("authenticationLimiter", "delAuthenticationLimiter", err)
			}
			res := NewDelAuthenticationLimiterResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("authenticationLimiter", "delAuthenticationLimiter", resp.StatusCode, string(body))
		}
	}
}
