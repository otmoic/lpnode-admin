// Code generated by goa v3.11.0, DO NOT EDIT.
//
// hedge HTTP server encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	hedge "admin-panel/gen/hedge"
	"context"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListResponse returns an encoder for responses returned by the hedge
// list endpoint.
func EncodeListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*hedge.ListResult)
		enc := encoder(ctx, w)
		body := NewListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeEditResponse returns an encoder for responses returned by the hedge
// edit endpoint.
func EncodeEditResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*hedge.EditResult)
		enc := encoder(ctx, w)
		body := NewEditResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeEditRequest returns a decoder for requests sent to the hedge edit
// endpoint.
func DecodeEditRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body EditRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewEditPayload(&body)

		return payload, nil
	}
}

// EncodeDelResponse returns an encoder for responses returned by the hedge del
// endpoint.
func EncodeDelResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*hedge.DelResult)
		enc := encoder(ctx, w)
		body := NewDelResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDelRequest returns a decoder for requests sent to the hedge del
// endpoint.
func DecodeDelRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body DelRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewDelPayload(&body)

		return payload, nil
	}
}

// marshalHedgeHedgeItemToHedgeItemResponseBody builds a value of type
// *HedgeItemResponseBody from a value of type *hedge.HedgeItem.
func marshalHedgeHedgeItemToHedgeItemResponseBody(v *hedge.HedgeItem) *HedgeItemResponseBody {
	if v == nil {
		return nil
	}
	res := &HedgeItemResponseBody{
		ID:        v.ID,
		HedgeType: v.HedgeType,
	}

	return res
}

// unmarshalHedgeItemRequestBodyToHedgeHedgeItem builds a value of type
// *hedge.HedgeItem from a value of type *HedgeItemRequestBody.
func unmarshalHedgeItemRequestBodyToHedgeHedgeItem(v *HedgeItemRequestBody) *hedge.HedgeItem {
	if v == nil {
		return nil
	}
	res := &hedge.HedgeItem{
		ID:        v.ID,
		HedgeType: v.HedgeType,
	}

	return res
}
