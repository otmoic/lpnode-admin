// Code generated by goa v3.11.0, DO NOT EDIT.
//
// lpmonit HTTP server encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	lpmonit "admin-panel/gen/lpmonit"
	"context"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeAddScriptResponse returns an encoder for responses returned by the
// lpmonit add_script endpoint.
func EncodeAddScriptResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*lpmonit.AddScriptResult)
		enc := encoder(ctx, w)
		body := NewAddScriptResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeAddScriptRequest returns a decoder for requests sent to the lpmonit
// add_script endpoint.
func DecodeAddScriptRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body AddScriptRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewAddScriptPayload(&body)

		return payload, nil
	}
}

// EncodeListScriptResponse returns an encoder for responses returned by the
// lpmonit list_script endpoint.
func EncodeListScriptResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*lpmonit.ListScriptResult)
		enc := encoder(ctx, w)
		body := NewListScriptResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeDeleteScriptResponse returns an encoder for responses returned by the
// lpmonit delete_script endpoint.
func EncodeDeleteScriptResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*lpmonit.DeleteScriptResult)
		enc := encoder(ctx, w)
		body := NewDeleteScriptResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteScriptRequest returns a decoder for requests sent to the lpmonit
// delete_script endpoint.
func DecodeDeleteScriptRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body DeleteScriptRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateDeleteScriptRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewDeleteScriptPayload(&body)

		return payload, nil
	}
}

// EncodeRunScriptResponse returns an encoder for responses returned by the
// lpmonit run_script endpoint.
func EncodeRunScriptResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*lpmonit.RunScriptResult)
		enc := encoder(ctx, w)
		body := NewRunScriptResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRunScriptRequest returns a decoder for requests sent to the lpmonit
// run_script endpoint.
func DecodeRunScriptRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body RunScriptRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewRunScriptPayload(&body)

		return payload, nil
	}
}

// EncodeRunResultResponse returns an encoder for responses returned by the
// lpmonit run_result endpoint.
func EncodeRunResultResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*lpmonit.RunResultResult)
		enc := encoder(ctx, w)
		body := NewRunResultResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRunResultRequest returns a decoder for requests sent to the lpmonit
// run_result endpoint.
func DecodeRunResultRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body RunResultRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewRunResultPayload(&body)

		return payload, nil
	}
}

// marshalLpmonitLpMointTaskItemToLpMointTaskItemResponseBody builds a value of
// type *LpMointTaskItemResponseBody from a value of type
// *lpmonit.LpMointTaskItem.
func marshalLpmonitLpMointTaskItemToLpMointTaskItemResponseBody(v *lpmonit.LpMointTaskItem) *LpMointTaskItemResponseBody {
	if v == nil {
		return nil
	}
	res := &LpMointTaskItemResponseBody{
		ID:         v.ID,
		Name:       v.Name,
		Cron:       v.Cron,
		CreatedAt:  v.CreatedAt,
		ScriptPath: v.ScriptPath,
		TaskType:   v.TaskType,
	}

	return res
}
