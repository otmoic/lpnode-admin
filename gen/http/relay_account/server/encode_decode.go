// Code generated by goa v3.11.0, DO NOT EDIT.
//
// relayAccount HTTP server encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	relayaccount "admin-panel/gen/relay_account"
	"context"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListAccountResponse returns an encoder for responses returned by the
// relayAccount listAccount endpoint.
func EncodeListAccountResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*relayaccount.ListAccountResult)
		enc := encoder(ctx, w)
		body := NewListAccountResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeRegisterAccountResponse returns an encoder for responses returned by
// the relayAccount registerAccount endpoint.
func EncodeRegisterAccountResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*relayaccount.RegisterAccountResult)
		enc := encoder(ctx, w)
		body := NewRegisterAccountResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeRegisterAccountRequest returns a decoder for requests sent to the
// relayAccount registerAccount endpoint.
func DecodeRegisterAccountRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body RegisterAccountRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateRegisterAccountRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewRegisterAccountPayload(&body)

		return payload, nil
	}
}

// marshalRelayaccountRelayAccountItemToRelayAccountItemResponseBody builds a
// value of type *RelayAccountItemResponseBody from a value of type
// *relayaccount.RelayAccountItem.
func marshalRelayaccountRelayAccountItemToRelayAccountItemResponseBody(v *relayaccount.RelayAccountItem) *RelayAccountItemResponseBody {
	if v == nil {
		return nil
	}
	res := &RelayAccountItemResponseBody{
		ID:           v.ID,
		Name:         v.Name,
		Profile:      v.Profile,
		LpIDFake:     v.LpIDFake,
		LpNodeAPIKey: v.LpNodeAPIKey,
		RelayAPIKey:  v.RelayAPIKey,
	}

	return res
}
