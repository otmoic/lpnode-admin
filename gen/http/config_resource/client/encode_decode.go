// Code generated by goa v3.11.0, DO NOT EDIT.
//
// configResource HTTP client encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	configresource "admin-panel/gen/config_resource"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildCreateResourceRequest instantiates a HTTP request object with method
// and path set to call the "configResource" service "createResource" endpoint
func (c *Client) BuildCreateResourceRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateResourceConfigResourcePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("configResource", "createResource", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateResourceRequest returns an encoder for requests sent to the
// configResource createResource server.
func EncodeCreateResourceRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*configresource.CreateResourcePayload)
		if !ok {
			return goahttp.ErrInvalidType("configResource", "createResource", "*configresource.CreateResourcePayload", v)
		}
		body := NewCreateResourceRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("configResource", "createResource", err)
		}
		return nil
	}
}

// DecodeCreateResourceResponse returns a decoder for responses returned by the
// configResource createResource endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeCreateResourceResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateResourceResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("configResource", "createResource", err)
			}
			err = ValidateCreateResourceResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("configResource", "createResource", err)
			}
			res := NewCreateResourceResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("configResource", "createResource", resp.StatusCode, string(body))
		}
	}
}

// BuildGetResourceRequest instantiates a HTTP request object with method and
// path set to call the "configResource" service "getResource" endpoint
func (c *Client) BuildGetResourceRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetResourceConfigResourcePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("configResource", "getResource", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetResourceRequest returns an encoder for requests sent to the
// configResource getResource server.
func EncodeGetResourceRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*configresource.GetResourcePayload)
		if !ok {
			return goahttp.ErrInvalidType("configResource", "getResource", "*configresource.GetResourcePayload", v)
		}
		body := NewGetResourceRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("configResource", "getResource", err)
		}
		return nil
	}
}

// DecodeGetResourceResponse returns a decoder for responses returned by the
// configResource getResource endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeGetResourceResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetResourceResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("configResource", "getResource", err)
			}
			err = ValidateGetResourceResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("configResource", "getResource", err)
			}
			res := NewGetResourceResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("configResource", "getResource", resp.StatusCode, string(body))
		}
	}
}

// BuildListResourceRequest instantiates a HTTP request object with method and
// path set to call the "configResource" service "listResource" endpoint
func (c *Client) BuildListResourceRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListResourceConfigResourcePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("configResource", "listResource", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListResourceResponse returns a decoder for responses returned by the
// configResource listResource endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeListResourceResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResourceResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("configResource", "listResource", err)
			}
			err = ValidateListResourceResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("configResource", "listResource", err)
			}
			res := NewListResourceResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("configResource", "listResource", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteResultRequest instantiates a HTTP request object with method and
// path set to call the "configResource" service "deleteResult" endpoint
func (c *Client) BuildDeleteResultRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteResultConfigResourcePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("configResource", "deleteResult", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteResultResponse returns a decoder for responses returned by the
// configResource deleteResult endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeDeleteResultResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteResultResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("configResource", "deleteResult", err)
			}
			res := NewDeleteResultResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("configResource", "deleteResult", resp.StatusCode, string(body))
		}
	}
}

// BuildEditResultRequest instantiates a HTTP request object with method and
// path set to call the "configResource" service "editResult" endpoint
func (c *Client) BuildEditResultRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: EditResultConfigResourcePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("configResource", "editResult", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeEditResultRequest returns an encoder for requests sent to the
// configResource editResult server.
func EncodeEditResultRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*configresource.EditResultPayload)
		if !ok {
			return goahttp.ErrInvalidType("configResource", "editResult", "*configresource.EditResultPayload", v)
		}
		body := NewEditResultRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("configResource", "editResult", err)
		}
		return nil
	}
}

// DecodeEditResultResponse returns a decoder for responses returned by the
// configResource editResult endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeEditResultResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body EditResultResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("configResource", "editResult", err)
			}
			res := NewEditResultResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("configResource", "editResult", resp.StatusCode, string(body))
		}
	}
}

// unmarshalConfigResultIDItemResponseBodyToConfigresourceConfigResultIDItem
// builds a value of type *configresource.ConfigResultIDItem from a value of
// type *ConfigResultIDItemResponseBody.
func unmarshalConfigResultIDItemResponseBodyToConfigresourceConfigResultIDItem(v *ConfigResultIDItemResponseBody) *configresource.ConfigResultIDItem {
	if v == nil {
		return nil
	}
	res := &configresource.ConfigResultIDItem{
		ID:       *v.ID,
		ClientID: v.ClientID,
	}

	return res
}

// unmarshalResourceConfigResultResponseBodyToConfigresourceResourceConfigResult
// builds a value of type *configresource.ResourceConfigResult from a value of
// type *ResourceConfigResultResponseBody.
func unmarshalResourceConfigResultResponseBodyToConfigresourceResourceConfigResult(v *ResourceConfigResultResponseBody) *configresource.ResourceConfigResult {
	if v == nil {
		return nil
	}
	res := &configresource.ResourceConfigResult{
		ID:             v.ID,
		TemplateResult: v.TemplateResult,
		Template:       v.Template,
		ClientID:       *v.ClientID,
		AppName:        v.AppName,
		Version:        v.Version,
		VersionHash:    v.VersionHash,
	}

	return res
}
