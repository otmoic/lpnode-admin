// Code generated by goa v3.11.0, DO NOT EDIT.
//
// lpmonit HTTP client encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	lpmonit "admin-panel/gen/lpmonit"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildAddScriptRequest instantiates a HTTP request object with method and
// path set to call the "lpmonit" service "add_script" endpoint
func (c *Client) BuildAddScriptRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddScriptLpmonitPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("lpmonit", "add_script", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddScriptRequest returns an encoder for requests sent to the lpmonit
// add_script server.
func EncodeAddScriptRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*lpmonit.AddScriptPayload)
		if !ok {
			return goahttp.ErrInvalidType("lpmonit", "add_script", "*lpmonit.AddScriptPayload", v)
		}
		body := NewAddScriptRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("lpmonit", "add_script", err)
		}
		return nil
	}
}

// DecodeAddScriptResponse returns a decoder for responses returned by the
// lpmonit add_script endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeAddScriptResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body AddScriptResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("lpmonit", "add_script", err)
			}
			res := NewAddScriptResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("lpmonit", "add_script", resp.StatusCode, string(body))
		}
	}
}

// BuildListScriptRequest instantiates a HTTP request object with method and
// path set to call the "lpmonit" service "list_script" endpoint
func (c *Client) BuildListScriptRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListScriptLpmonitPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("lpmonit", "list_script", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListScriptResponse returns a decoder for responses returned by the
// lpmonit list_script endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeListScriptResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListScriptResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("lpmonit", "list_script", err)
			}
			err = ValidateListScriptResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("lpmonit", "list_script", err)
			}
			res := NewListScriptResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("lpmonit", "list_script", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteScriptRequest instantiates a HTTP request object with method and
// path set to call the "lpmonit" service "delete_script" endpoint
func (c *Client) BuildDeleteScriptRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteScriptLpmonitPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("lpmonit", "delete_script", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteScriptRequest returns an encoder for requests sent to the
// lpmonit delete_script server.
func EncodeDeleteScriptRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*lpmonit.DeleteScriptPayload)
		if !ok {
			return goahttp.ErrInvalidType("lpmonit", "delete_script", "*lpmonit.DeleteScriptPayload", v)
		}
		body := NewDeleteScriptRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("lpmonit", "delete_script", err)
		}
		return nil
	}
}

// DecodeDeleteScriptResponse returns a decoder for responses returned by the
// lpmonit delete_script endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeDeleteScriptResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteScriptResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("lpmonit", "delete_script", err)
			}
			res := NewDeleteScriptResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("lpmonit", "delete_script", resp.StatusCode, string(body))
		}
	}
}

// BuildRunScriptRequest instantiates a HTTP request object with method and
// path set to call the "lpmonit" service "run_script" endpoint
func (c *Client) BuildRunScriptRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RunScriptLpmonitPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("lpmonit", "run_script", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRunScriptRequest returns an encoder for requests sent to the lpmonit
// run_script server.
func EncodeRunScriptRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*lpmonit.RunScriptPayload)
		if !ok {
			return goahttp.ErrInvalidType("lpmonit", "run_script", "*lpmonit.RunScriptPayload", v)
		}
		body := NewRunScriptRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("lpmonit", "run_script", err)
		}
		return nil
	}
}

// DecodeRunScriptResponse returns a decoder for responses returned by the
// lpmonit run_script endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeRunScriptResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RunScriptResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("lpmonit", "run_script", err)
			}
			res := NewRunScriptResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("lpmonit", "run_script", resp.StatusCode, string(body))
		}
	}
}

// BuildRunResultRequest instantiates a HTTP request object with method and
// path set to call the "lpmonit" service "run_result" endpoint
func (c *Client) BuildRunResultRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: RunResultLpmonitPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("lpmonit", "run_result", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeRunResultRequest returns an encoder for requests sent to the lpmonit
// run_result server.
func EncodeRunResultRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*lpmonit.RunResultPayload)
		if !ok {
			return goahttp.ErrInvalidType("lpmonit", "run_result", "*lpmonit.RunResultPayload", v)
		}
		body := NewRunResultRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("lpmonit", "run_result", err)
		}
		return nil
	}
}

// DecodeRunResultResponse returns a decoder for responses returned by the
// lpmonit run_result endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeRunResultResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body RunResultResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("lpmonit", "run_result", err)
			}
			res := NewRunResultResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("lpmonit", "run_result", resp.StatusCode, string(body))
		}
	}
}

// unmarshalLpMointTaskItemResponseBodyToLpmonitLpMointTaskItem builds a value
// of type *lpmonit.LpMointTaskItem from a value of type
// *LpMointTaskItemResponseBody.
func unmarshalLpMointTaskItemResponseBodyToLpmonitLpMointTaskItem(v *LpMointTaskItemResponseBody) *lpmonit.LpMointTaskItem {
	if v == nil {
		return nil
	}
	res := &lpmonit.LpMointTaskItem{
		ID:         v.ID,
		Name:       *v.Name,
		Cron:       *v.Cron,
		CreatedAt:  *v.CreatedAt,
		ScriptPath: v.ScriptPath,
		TaskType:   *v.TaskType,
	}

	return res
}
