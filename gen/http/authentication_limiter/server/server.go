// Code generated by goa v3.11.0, DO NOT EDIT.
//
// authenticationLimiter HTTP server
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	authenticationlimiter "admin-panel/gen/authentication_limiter"
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the authenticationLimiter service endpoint HTTP handlers.
type Server struct {
	Mounts                   []*MountPoint
	GetAuthenticationLimiter http.Handler
	SetAuthenticationLimiter http.Handler
	DelAuthenticationLimiter http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the authenticationLimiter service
// endpoints using the provided encoder and decoder. The handlers are mounted
// on the given mux using the HTTP verb and path defined in the design.
// errhandler is called whenever a response fails to be encoded. formatter is
// used to format errors returned by the service methods prior to encoding.
// Both errhandler and formatter are optional and can be nil.
func New(
	e *authenticationlimiter.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetAuthenticationLimiter", "POST", "/lpnode/lpnode_admin_panel/authenticationLimiter/getAuthenticationLimiter"},
			{"SetAuthenticationLimiter", "POST", "/lpnode/lpnode_admin_panel/authenticationLimiter/setAuthenticationLimiter"},
			{"DelAuthenticationLimiter", "POST", "/lpnode/lpnode_admin_panel/authenticationLimiter/delAuthenticationLimiter"},
		},
		GetAuthenticationLimiter: NewGetAuthenticationLimiterHandler(e.GetAuthenticationLimiter, mux, decoder, encoder, errhandler, formatter),
		SetAuthenticationLimiter: NewSetAuthenticationLimiterHandler(e.SetAuthenticationLimiter, mux, decoder, encoder, errhandler, formatter),
		DelAuthenticationLimiter: NewDelAuthenticationLimiterHandler(e.DelAuthenticationLimiter, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "authenticationLimiter" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetAuthenticationLimiter = m(s.GetAuthenticationLimiter)
	s.SetAuthenticationLimiter = m(s.SetAuthenticationLimiter)
	s.DelAuthenticationLimiter = m(s.DelAuthenticationLimiter)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return authenticationlimiter.MethodNames[:] }

// Mount configures the mux to serve the authenticationLimiter endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetAuthenticationLimiterHandler(mux, h.GetAuthenticationLimiter)
	MountSetAuthenticationLimiterHandler(mux, h.SetAuthenticationLimiter)
	MountDelAuthenticationLimiterHandler(mux, h.DelAuthenticationLimiter)
}

// Mount configures the mux to serve the authenticationLimiter endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountGetAuthenticationLimiterHandler configures the mux to serve the
// "authenticationLimiter" service "getAuthenticationLimiter" endpoint.
func MountGetAuthenticationLimiterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/authenticationLimiter/getAuthenticationLimiter", f)
}

// NewGetAuthenticationLimiterHandler creates a HTTP handler which loads the
// HTTP request and calls the "authenticationLimiter" service
// "getAuthenticationLimiter" endpoint.
func NewGetAuthenticationLimiterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGetAuthenticationLimiterResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getAuthenticationLimiter")
		ctx = context.WithValue(ctx, goa.ServiceKey, "authenticationLimiter")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountSetAuthenticationLimiterHandler configures the mux to serve the
// "authenticationLimiter" service "setAuthenticationLimiter" endpoint.
func MountSetAuthenticationLimiterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/authenticationLimiter/setAuthenticationLimiter", f)
}

// NewSetAuthenticationLimiterHandler creates a HTTP handler which loads the
// HTTP request and calls the "authenticationLimiter" service
// "setAuthenticationLimiter" endpoint.
func NewSetAuthenticationLimiterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeSetAuthenticationLimiterRequest(mux, decoder)
		encodeResponse = EncodeSetAuthenticationLimiterResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "setAuthenticationLimiter")
		ctx = context.WithValue(ctx, goa.ServiceKey, "authenticationLimiter")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDelAuthenticationLimiterHandler configures the mux to serve the
// "authenticationLimiter" service "delAuthenticationLimiter" endpoint.
func MountDelAuthenticationLimiterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/lpnode/lpnode_admin_panel/authenticationLimiter/delAuthenticationLimiter", f)
}

// NewDelAuthenticationLimiterHandler creates a HTTP handler which loads the
// HTTP request and calls the "authenticationLimiter" service
// "delAuthenticationLimiter" endpoint.
func NewDelAuthenticationLimiterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeDelAuthenticationLimiterResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "delAuthenticationLimiter")
		ctx = context.WithValue(ctx, goa.ServiceKey, "authenticationLimiter")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
